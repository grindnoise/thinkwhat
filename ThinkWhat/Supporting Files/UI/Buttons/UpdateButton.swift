//
//  UpdateButtonStyleKit.swift
//  ProjectName
//
//  Created by pavel on 11.01.2019.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

@IBDesignable
class UpdateButton: UIView {
    override func draw(_ rect: CGRect) {
        UpdateButtonStyleKit.drawUpdateButton(frame: rect, resizing: .aspectFit)
    }
}

public class UpdateButtonStyleKit : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawUpdateButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 658, height: 623), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 658, height: 623), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 658, y: resizedFrame.height / 623)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.753, green: 0.255, blue: 0.271, alpha: 1.000)
        
        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 307.16, y: 111.81))
        bezierPath.addCurve(to: CGPoint(x: 229.02, y: 138.46), controlPoint1: CGPoint(x: 282.02, y: 114.21), controlPoint2: CGPoint(x: 252.14, y: 124.36))
        bezierPath.addCurve(to: CGPoint(x: 166.83, y: 198.24), controlPoint1: CGPoint(x: 206.04, y: 152.42), controlPoint2: CGPoint(x: 181.16, y: 176.38))
        bezierPath.addCurve(to: CGPoint(x: 140.2, y: 265.91), controlPoint1: CGPoint(x: 153.31, y: 218.68), controlPoint2: CGPoint(x: 142.5, y: 246.17))
        bezierPath.addLine(to: CGPoint(x: 139.25, y: 273.38))
        bezierPath.addLine(to: CGPoint(x: 151.96, y: 274.93))
        bezierPath.addCurve(to: CGPoint(x: 167.1, y: 267.74), controlPoint1: CGPoint(x: 165.89, y: 276.62), controlPoint2: CGPoint(x: 165.75, y: 276.62))
        bezierPath.addCurve(to: CGPoint(x: 181.16, y: 228.55), controlPoint1: CGPoint(x: 168.59, y: 257.73), controlPoint2: CGPoint(x: 174.54, y: 241.24))
        bezierPath.addCurve(to: CGPoint(x: 342.99, y: 140.15), controlPoint1: CGPoint(x: 212.12, y: 168.91), controlPoint2: CGPoint(x: 281.34, y: 131.13))
        bezierPath.addCurve(to: CGPoint(x: 470.74, y: 230.1), controlPoint1: CGPoint(x: 397.6, y: 148.05), controlPoint2: CGPoint(x: 448.3, y: 183.72))
        bezierPath.addCurve(to: CGPoint(x: 473.72, y: 239.97), controlPoint1: CGPoint(x: 473.58, y: 235.74), controlPoint2: CGPoint(x: 474.66, y: 239.4))
        bezierPath.addCurve(to: CGPoint(x: 455.33, y: 245.61), controlPoint1: CGPoint(x: 472.91, y: 240.39), controlPoint2: CGPoint(x: 464.66, y: 242.93))
        bezierPath.addCurve(to: CGPoint(x: 438.3, y: 253.78), controlPoint1: CGPoint(x: 439.51, y: 249.98), controlPoint2: CGPoint(x: 438.3, y: 250.54))
        bezierPath.addCurve(to: CGPoint(x: 469.66, y: 286.21), controlPoint1: CGPoint(x: 438.3, y: 261.12), controlPoint2: CGPoint(x: 442.62, y: 265.49))
        bezierPath.addCurve(to: CGPoint(x: 503.32, y: 307.08), controlPoint1: CGPoint(x: 495.62, y: 305.95), controlPoint2: CGPoint(x: 497.37, y: 307.08))
        bezierPath.addCurve(to: CGPoint(x: 512.38, y: 304.54), controlPoint1: CGPoint(x: 507.65, y: 307.08), controlPoint2: CGPoint(x: 510.62, y: 306.23))
        bezierPath.addCurve(to: CGPoint(x: 528.06, y: 270.42), controlPoint1: CGPoint(x: 513.87, y: 303.13), controlPoint2: CGPoint(x: 521.03, y: 287.76))
        bezierPath.addCurve(to: CGPoint(x: 541.04, y: 231.09), controlPoint1: CGPoint(x: 539.28, y: 243.35), controlPoint2: CGPoint(x: 541.04, y: 237.85))
        bezierPath.addCurve(to: CGPoint(x: 539.82, y: 222.49), controlPoint1: CGPoint(x: 541.04, y: 226.86), controlPoint2: CGPoint(x: 540.5, y: 223.05))
        bezierPath.addCurve(to: CGPoint(x: 520.76, y: 226.86), controlPoint1: CGPoint(x: 539.15, y: 222.06), controlPoint2: CGPoint(x: 530.5, y: 224.04))
        bezierPath.addCurve(to: CGPoint(x: 502.38, y: 231.23), controlPoint1: CGPoint(x: 511.03, y: 229.68), controlPoint2: CGPoint(x: 502.65, y: 231.65))
        bezierPath.addCurve(to: CGPoint(x: 495.89, y: 218.12), controlPoint1: CGPoint(x: 502.11, y: 230.94), controlPoint2: CGPoint(x: 499.13, y: 225.02))
        bezierPath.addCurve(to: CGPoint(x: 307.16, y: 111.81), controlPoint1: CGPoint(x: 463.58, y: 149.17), controlPoint2: CGPoint(x: 384.36, y: 104.62))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 148.04, y: 317.65))
        bezier2Path.addCurve(to: CGPoint(x: 128.84, y: 355.15), controlPoint1: CGPoint(x: 143.72, y: 319.48), controlPoint2: CGPoint(x: 142.36, y: 322.3))
        bezier2Path.addCurve(to: CGPoint(x: 116.54, y: 392.94), controlPoint1: CGPoint(x: 118.16, y: 380.95), controlPoint2: CGPoint(x: 116.54, y: 386.03))
        bezier2Path.addCurve(to: CGPoint(x: 120.33, y: 400.83), controlPoint1: CGPoint(x: 116.54, y: 400.55), controlPoint2: CGPoint(x: 116.68, y: 400.83))
        bezier2Path.addCurve(to: CGPoint(x: 138.17, y: 396.6), controlPoint1: CGPoint(x: 122.35, y: 400.83), controlPoint2: CGPoint(x: 130.33, y: 399))
        bezier2Path.addCurve(to: CGPoint(x: 153.85, y: 392.37), controlPoint1: CGPoint(x: 146.01, y: 394.34), controlPoint2: CGPoint(x: 153.04, y: 392.37))
        bezier2Path.addCurve(to: CGPoint(x: 160.88, y: 404.21), controlPoint1: CGPoint(x: 154.67, y: 392.37), controlPoint2: CGPoint(x: 157.91, y: 397.73))
        bezier2Path.addCurve(to: CGPoint(x: 194.82, y: 452.99), controlPoint1: CGPoint(x: 169.4, y: 422.68), controlPoint2: CGPoint(x: 179.27, y: 436.92))
        bezier2Path.addCurve(to: CGPoint(x: 288.64, y: 507.27), controlPoint1: CGPoint(x: 221.18, y: 480.34), controlPoint2: CGPoint(x: 251.6, y: 497.97))
        bezier2Path.addCurve(to: CGPoint(x: 472.23, y: 449.19), controlPoint1: CGPoint(x: 354.88, y: 523.91), controlPoint2: CGPoint(x: 424.1, y: 502.06))
        bezier2Path.addCurve(to: CGPoint(x: 516.17, y: 365.58), controlPoint1: CGPoint(x: 494.67, y: 424.66), controlPoint2: CGPoint(x: 510.08, y: 395.33))
        bezier2Path.addCurve(to: CGPoint(x: 505.62, y: 349.09), controlPoint1: CGPoint(x: 519.28, y: 349.93), controlPoint2: CGPoint(x: 519.82, y: 350.78))
        bezier2Path.addCurve(to: CGPoint(x: 492.78, y: 347.82), controlPoint1: CGPoint(x: 498.73, y: 348.24), controlPoint2: CGPoint(x: 492.91, y: 347.68))
        bezier2Path.addCurve(to: CGPoint(x: 488.99, y: 362.2), controlPoint1: CGPoint(x: 492.51, y: 347.96), controlPoint2: CGPoint(x: 490.89, y: 354.45))
        bezier2Path.addCurve(to: CGPoint(x: 303.78, y: 482.04), controlPoint1: CGPoint(x: 469.53, y: 442.28), controlPoint2: CGPoint(x: 381.25, y: 499.38))
        bezier2Path.addCurve(to: CGPoint(x: 199.95, y: 415.63), controlPoint1: CGPoint(x: 261.74, y: 472.59), controlPoint2: CGPoint(x: 223.34, y: 448.06))
        bezier2Path.addCurve(to: CGPoint(x: 183.73, y: 384.19), controlPoint1: CGPoint(x: 189.95, y: 401.54), controlPoint2: CGPoint(x: 181.7, y: 385.46))
        bezier2Path.addCurve(to: CGPoint(x: 202.25, y: 378.41), controlPoint1: CGPoint(x: 184.54, y: 383.63), controlPoint2: CGPoint(x: 192.92, y: 381.09))
        bezier2Path.addCurve(to: CGPoint(x: 219.29, y: 370.24), controlPoint1: CGPoint(x: 218.07, y: 374.04), controlPoint2: CGPoint(x: 219.29, y: 373.48))
        bezier2Path.addCurve(to: CGPoint(x: 188.19, y: 338.09), controlPoint1: CGPoint(x: 219.29, y: 363.05), controlPoint2: CGPoint(x: 214.96, y: 358.53))
        bezier2Path.addCurve(to: CGPoint(x: 148.04, y: 317.65), controlPoint1: CGPoint(x: 160.07, y: 316.66), controlPoint2: CGPoint(x: 155.48, y: 314.27))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()
        
    }





    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
