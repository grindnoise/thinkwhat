//
//  LogoStyleKit.swift
//  ProjectName
//
//  Created by pavel on 02.01.2019.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

class Logo: UIView {
  
  override init(frame: CGRect) {
    super.init(frame: frame)
    
    isOpaque = false
    backgroundColor = .clear
    heightAnchor.constraint(equalTo: widthAnchor, multiplier: 1/1).isActive = true
  }
  
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  override func draw(_ rect: CGRect) {
    LogoStyleKit.drawLogo(frame: rect, resizing: .aspectFit)
  }
}

class LogoText: UIView {
  
  override init(frame: CGRect) {
    super.init(frame: frame)
    
    isOpaque = false
    backgroundColor = .clear
    heightAnchor.constraint(equalTo: widthAnchor, multiplier: 125/1000).isActive = true
  }
  
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  override func draw(_ rect: CGRect) {
    LogoStyleKit.drawLogoText(frame: rect, resizing: .aspectFit, color: traitCollection.userInterfaceStyle == .dark ? .white : UIColor(red: 0.149, green: 0.149, blue: 0.149, alpha: 1.000))
  }
  
  override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
    super.traitCollectionDidChange(previousTraitCollection)
    
    setNeedsDisplay()
  }
}


public class LogoStyleKit : NSObject {
  
  @objc dynamic public class func drawLogo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 451, height: 451), resizing: ResizingBehavior = .aspectFit) {
    //// General Declarations
    let context = UIGraphicsGetCurrentContext()!
    
    //// Resize to Target Frame
    context.saveGState()
    let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 451, height: 451), target: targetFrame)
    context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
    context.scaleBy(x: resizedFrame.width / 451, y: resizedFrame.height / 451)
    
    
    //// Color Declarations
    let color = UIColor(red: 0.129, green: 0.627, blue: 0.220, alpha: 1.000)
    
    //// Group
    //// icon_2 Drawing
    let icon_2Path = UIBezierPath()
    icon_2Path.move(to: CGPoint(x: 428.06, y: 268.46))
    icon_2Path.addCurve(to: CGPoint(x: 446.77, y: 335.82), controlPoint1: CGPoint(x: 439.96, y: 288.32), controlPoint2: CGPoint(x: 446.77, y: 311.38))
    icon_2Path.addCurve(to: CGPoint(x: 446.69, y: 339.77), controlPoint1: CGPoint(x: 446.77, y: 337.14), controlPoint2: CGPoint(x: 446.75, y: 338.46))
    icon_2Path.addCurve(to: CGPoint(x: 251.4, y: 411.81), controlPoint1: CGPoint(x: 443.8, y: 437.95), controlPoint2: CGPoint(x: 320.35, y: 482.89))
    icon_2Path.addLine(to: CGPoint(x: 217, y: 376.33))
    icon_2Path.addCurve(to: CGPoint(x: 183.2, y: 363.84), controlPoint1: CGPoint(x: 208.27, y: 367.31), controlPoint2: CGPoint(x: 195.83, y: 362.87))
    icon_2Path.addCurve(to: CGPoint(x: 175.98, y: 364.11), controlPoint1: CGPoint(x: 180.82, y: 364.02), controlPoint2: CGPoint(x: 178.41, y: 364.11))
    icon_2Path.addLine(to: CGPoint(x: 84.64, y: 364.11))
    icon_2Path.addLine(to: CGPoint(x: 84.64, y: 266.18))
    icon_2Path.addCurve(to: CGPoint(x: 84.7, y: 263.01), controlPoint1: CGPoint(x: 84.64, y: 265.12), controlPoint2: CGPoint(x: 84.66, y: 264.06))
    icon_2Path.addCurve(to: CGPoint(x: 72.54, y: 233.4), controlPoint1: CGPoint(x: 85.09, y: 251.94), controlPoint2: CGPoint(x: 80.52, y: 241.24))
    icon_2Path.addLine(to: CGPoint(x: 33.69, y: 195.21))
    icon_2Path.addCurve(to: CGPoint(x: 111.6, y: 5), controlPoint1: CGPoint(x: -36.96, y: 125.76), controlPoint2: CGPoint(x: 11.69, y: 5.53))
    icon_2Path.addCurve(to: CGPoint(x: 115.62, y: 5.04), controlPoint1: CGPoint(x: 112.93, y: 5), controlPoint2: CGPoint(x: 114.28, y: 5))
    icon_2Path.addCurve(to: CGPoint(x: 183.71, y: 25.02), controlPoint1: CGPoint(x: 140.5, y: 5.62), controlPoint2: CGPoint(x: 163.8, y: 12.87))
    icon_2Path.addCurve(to: CGPoint(x: 253.21, y: 5.11), controlPoint1: CGPoint(x: 203.32, y: 11.53), controlPoint2: CGPoint(x: 227.44, y: 4.04))
    icon_2Path.addCurve(to: CGPoint(x: 327.49, y: 36.7), controlPoint1: CGPoint(x: 282.23, y: 6.3), controlPoint2: CGPoint(x: 308.25, y: 18.18))
    icon_2Path.addCurve(to: CGPoint(x: 357.54, y: 30.28), controlPoint1: CGPoint(x: 336.55, y: 32.37), controlPoint2: CGPoint(x: 346.78, y: 30.03))
    icon_2Path.addCurve(to: CGPoint(x: 421.08, y: 95.8), controlPoint1: CGPoint(x: 393.48, y: 31.14), controlPoint2: CGPoint(x: 421.93, y: 60.46))
    icon_2Path.addCurve(to: CGPoint(x: 414.68, y: 122.02), controlPoint1: CGPoint(x: 420.86, y: 105.2), controlPoint2: CGPoint(x: 418.57, y: 114.08))
    icon_2Path.addCurve(to: CGPoint(x: 449.97, y: 200.63), controlPoint1: CGPoint(x: 435.91, y: 141.77), controlPoint2: CGPoint(x: 449.38, y: 169.6))
    icon_2Path.addCurve(to: CGPoint(x: 428.06, y: 268.46), controlPoint1: CGPoint(x: 450.46, y: 225.98), controlPoint2: CGPoint(x: 442.25, y: 249.51))
    icon_2Path.close()
    color.setFill()
    icon_2Path.fill()
    
    
    //// icon Drawing
    let iconPath = UIBezierPath()
    iconPath.move(to: CGPoint(x: 321.61, y: 282.93))
    iconPath.addLine(to: CGPoint(x: 237.94, y: 316.5))
    iconPath.addCurve(to: CGPoint(x: 213.28, y: 299.61), controlPoint1: CGPoint(x: 226.06, y: 321.26), controlPoint2: CGPoint(x: 213.16, y: 312.42))
    iconPath.addLine(to: CGPoint(x: 213.44, y: 283.93))
    iconPath.addLine(to: CGPoint(x: 213.85, y: 241.38))
    iconPath.addLine(to: CGPoint(x: 157.22, y: 240.82))
    iconPath.addLine(to: CGPoint(x: 152.79, y: 240.78))
    iconPath.addCurve(to: CGPoint(x: 134.97, y: 212.39), controlPoint1: CGPoint(x: 138.3, y: 240.65), controlPoint2: CGPoint(x: 128.82, y: 225.53))
    iconPath.addLine(to: CGPoint(x: 180.44, y: 115.25))
    iconPath.addLine(to: CGPoint(x: 149.48, y: 100.45))
    iconPath.addCurve(to: CGPoint(x: 144.04, y: 85.21), controlPoint1: CGPoint(x: 143.8, y: 97.73), controlPoint2: CGPoint(x: 141.36, y: 90.92))
    iconPath.addLine(to: CGPoint(x: 146.5, y: 79.97))
    iconPath.addCurve(to: CGPoint(x: 161.75, y: 74.45), controlPoint1: CGPoint(x: 149.19, y: 74.23), controlPoint2: CGPoint(x: 156.02, y: 71.76))
    iconPath.addLine(to: CGPoint(x: 258.73, y: 120.05))
    iconPath.addCurve(to: CGPoint(x: 264.24, y: 135.33), controlPoint1: CGPoint(x: 264.47, y: 122.75), controlPoint2: CGPoint(x: 266.93, y: 129.59))
    iconPath.addLine(to: CGPoint(x: 261.41, y: 141.37))
    iconPath.addCurve(to: CGPoint(x: 247.44, y: 146.43), controlPoint1: CGPoint(x: 258.95, y: 146.63), controlPoint2: CGPoint(x: 252.7, y: 148.9))
    iconPath.addLine(to: CGPoint(x: 214.75, y: 131.06))
    iconPath.addLine(to: CGPoint(x: 178.92, y: 206.52))
    iconPath.addLine(to: CGPoint(x: 237.22, y: 208.88))
    iconPath.addLine(to: CGPoint(x: 239.98, y: 208.94))
    iconPath.addCurve(to: CGPoint(x: 245.18, y: 214.23), controlPoint1: CGPoint(x: 242.86, y: 209), controlPoint2: CGPoint(x: 245.15, y: 211.34))
    iconPath.addLine(to: CGPoint(x: 245.72, y: 276.3))
    iconPath.addLine(to: CGPoint(x: 302.55, y: 252.52))
    iconPath.addCurve(to: CGPoint(x: 332.56, y: 241.73), controlPoint1: CGPoint(x: 309.9, y: 249.45), controlPoint2: CGPoint(x: 322.66, y: 243.4))
    iconPath.addCurve(to: CGPoint(x: 347.23, y: 249.36), controlPoint1: CGPoint(x: 338.59, y: 240.72), controlPoint2: CGPoint(x: 344.55, y: 243.84))
    iconPath.addLine(to: CGPoint(x: 350.09, y: 255.29))
    iconPath.addCurve(to: CGPoint(x: 351.25, y: 262.7), controlPoint1: CGPoint(x: 351.21, y: 257.59), controlPoint2: CGPoint(x: 351.62, y: 260.18))
    iconPath.addCurve(to: CGPoint(x: 344.11, y: 272.73), controlPoint1: CGPoint(x: 350.57, y: 267.32), controlPoint2: CGPoint(x: 348.65, y: 270.3))
    iconPath.addCurve(to: CGPoint(x: 321.61, y: 282.93), controlPoint1: CGPoint(x: 336.89, y: 276.57), controlPoint2: CGPoint(x: 325.68, y: 281.3))
    iconPath.close()
    UIColor.white.setFill()
    iconPath.fill()
    
    context.restoreGState()
    
  }
  
  @objc dynamic public class func drawLogoText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 948, height: 119), resizing: ResizingBehavior = .aspectFit, color: UIColor) {
          //// General Declarations
          let context = UIGraphicsGetCurrentContext()!
          
          //// Resize to Target Frame
          context.saveGState()
          let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 948, height: 119), target: targetFrame)
          context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
          context.scaleBy(x: resizedFrame.width / 948, y: resizedFrame.height / 119)


          //// Color Declarations
          let fillColor = color
          let fillColor2 = UIColor(red: 0.129, green: 0.627, blue: 0.220, alpha: 1.000)

          //// LogoText.svg Group
          //// Bezier Drawing
          let bezierPath = UIBezierPath()
          bezierPath.move(to: CGPoint(x: 53.81, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 35.92, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 35.92, y: 16.26))
          bezierPath.addLine(to: CGPoint(x: 0.45, y: 16.26))
          bezierPath.addLine(to: CGPoint(x: 0.45, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 89.27, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 89.27, y: 16.26))
          bezierPath.addLine(to: CGPoint(x: 53.81, y: 16.26))
          bezierPath.addLine(to: CGPoint(x: 53.81, y: 118.54))
          bezierPath.close()
          bezierPath.move(to: CGPoint(x: 196.4, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 178.5, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 178.5, y: 64.85))
          bezierPath.addLine(to: CGPoint(x: 122, y: 64.85))
          bezierPath.addLine(to: CGPoint(x: 122, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 104.1, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 104.1, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 122, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 122, y: 49.7))
          bezierPath.addLine(to: CGPoint(x: 178.5, y: 49.7))
          bezierPath.addLine(to: CGPoint(x: 178.5, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 196.4, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 196.4, y: 118.54))
          bezierPath.close()
          bezierPath.move(to: CGPoint(x: 261.2, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 215.3, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 215.3, y: 108.33))
          bezierPath.addLine(to: CGPoint(x: 229.38, y: 104.21))
          bezierPath.addLine(to: CGPoint(x: 229.38, y: 15.44))
          bezierPath.addLine(to: CGPoint(x: 215.3, y: 11.15))
          bezierPath.addLine(to: CGPoint(x: 215.3, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 261.2, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 261.2, y: 11.15))
          bezierPath.addLine(to: CGPoint(x: 247.28, y: 15.44))
          bezierPath.addLine(to: CGPoint(x: 247.28, y: 104.21))
          bezierPath.addLine(to: CGPoint(x: 261.2, y: 108.33))
          bezierPath.addLine(to: CGPoint(x: 261.2, y: 118.54))
          bezierPath.close()
          bezierPath.move(to: CGPoint(x: 377.12, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 355.41, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 295.59, y: 23.51))
          bezierPath.addLine(to: CGPoint(x: 294.92, y: 23.51))
          bezierPath.addCurve(to: CGPoint(x: 295.26, y: 30.59), controlPoint1: CGPoint(x: 295.03, y: 25.7), controlPoint2: CGPoint(x: 295.15, y: 28.06))
          bezierPath.addCurve(to: CGPoint(x: 295.75, y: 38.66), controlPoint1: CGPoint(x: 295.48, y: 33.12), controlPoint2: CGPoint(x: 295.64, y: 35.81))
          bezierPath.addCurve(to: CGPoint(x: 296.08, y: 47.23), controlPoint1: CGPoint(x: 295.86, y: 41.41), controlPoint2: CGPoint(x: 295.97, y: 44.26))
          bezierPath.addCurve(to: CGPoint(x: 296.25, y: 55.95), controlPoint1: CGPoint(x: 296.19, y: 50.08), controlPoint2: CGPoint(x: 296.25, y: 52.99))
          bezierPath.addLine(to: CGPoint(x: 296.25, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 280.01, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 280.01, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 301.55, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 361.21, y: 95.48))
          bezierPath.addLine(to: CGPoint(x: 361.7, y: 95.48))
          bezierPath.addCurve(to: CGPoint(x: 361.37, y: 89.39), controlPoint1: CGPoint(x: 361.59, y: 93.84), controlPoint2: CGPoint(x: 361.48, y: 91.81))
          bezierPath.addCurve(to: CGPoint(x: 361.04, y: 81.32), controlPoint1: CGPoint(x: 361.26, y: 86.86), controlPoint2: CGPoint(x: 361.15, y: 84.17))
          bezierPath.addCurve(to: CGPoint(x: 360.88, y: 72.59), controlPoint1: CGPoint(x: 361.04, y: 78.46), controlPoint2: CGPoint(x: 360.99, y: 75.56))
          bezierPath.addCurve(to: CGPoint(x: 360.54, y: 64.19), controlPoint1: CGPoint(x: 360.77, y: 69.63), controlPoint2: CGPoint(x: 360.66, y: 66.83))
          bezierPath.addLine(to: CGPoint(x: 360.54, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 377.12, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 377.12, y: 118.54))
          bezierPath.close()
          bezierPath.move(to: CGPoint(x: 494.33, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 473.62, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 434.84, y: 64.35))
          bezierPath.addLine(to: CGPoint(x: 423.24, y: 73.91))
          bezierPath.addLine(to: CGPoint(x: 423.24, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 405.35, y: 118.54))
          bezierPath.addLine(to: CGPoint(x: 405.35, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 423.24, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 423.24, y: 57.77))
          bezierPath.addCurve(to: CGPoint(x: 431.86, y: 47.72), controlPoint1: CGPoint(x: 426.12, y: 54.36), controlPoint2: CGPoint(x: 428.99, y: 51.01))
          bezierPath.addCurve(to: CGPoint(x: 440.48, y: 37.84), controlPoint1: CGPoint(x: 434.73, y: 44.43), controlPoint2: CGPoint(x: 437.6, y: 41.13))
          bezierPath.addLine(to: CGPoint(x: 472.46, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 493.01, y: 0.94))
          bezierPath.addLine(to: CGPoint(x: 447.77, y: 52.33))
          bezierPath.addLine(to: CGPoint(x: 494.33, y: 118.54))
          bezierPath.close()
          fillColor.setFill()
          bezierPath.fill()


          //// Bezier 2 Drawing
          let bezier2Path = UIBezierPath()
          bezier2Path.move(to: CGPoint(x: 645.43, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 614.27, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 595.22, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 574.34, y: 45.91))
          bezier2Path.addCurve(to: CGPoint(x: 572.35, y: 39.32), controlPoint1: CGPoint(x: 573.68, y: 43.93), controlPoint2: CGPoint(x: 573.01, y: 41.73))
          bezier2Path.addCurve(to: CGPoint(x: 570.69, y: 32.24), controlPoint1: CGPoint(x: 571.8, y: 36.9), controlPoint2: CGPoint(x: 571.25, y: 34.54))
          bezier2Path.addCurve(to: CGPoint(x: 569.2, y: 25.81), controlPoint1: CGPoint(x: 570.14, y: 29.82), controlPoint2: CGPoint(x: 569.65, y: 27.68))
          bezier2Path.addCurve(to: CGPoint(x: 568.37, y: 21.53), controlPoint1: CGPoint(x: 568.87, y: 23.95), controlPoint2: CGPoint(x: 568.6, y: 22.52))
          bezier2Path.addCurve(to: CGPoint(x: 567.71, y: 25.81), controlPoint1: CGPoint(x: 568.26, y: 22.52), controlPoint2: CGPoint(x: 568.04, y: 23.95))
          bezier2Path.addCurve(to: CGPoint(x: 566.39, y: 32.24), controlPoint1: CGPoint(x: 567.38, y: 27.68), controlPoint2: CGPoint(x: 566.94, y: 29.82))
          bezier2Path.addCurve(to: CGPoint(x: 564.73, y: 39.48), controlPoint1: CGPoint(x: 565.84, y: 34.54), controlPoint2: CGPoint(x: 565.28, y: 36.96))
          bezier2Path.addCurve(to: CGPoint(x: 562.91, y: 46.4), controlPoint1: CGPoint(x: 564.18, y: 41.9), controlPoint2: CGPoint(x: 563.57, y: 44.21))
          bezier2Path.addLine(to: CGPoint(x: 542.36, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 523.3, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 492.31, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 510.71, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 528.11, y: 70.45))
          bezier2Path.addCurve(to: CGPoint(x: 529.76, y: 77.86), controlPoint1: CGPoint(x: 528.66, y: 72.86), controlPoint2: CGPoint(x: 529.21, y: 75.34))
          bezier2Path.addCurve(to: CGPoint(x: 531.26, y: 85.44), controlPoint1: CGPoint(x: 530.32, y: 80.39), controlPoint2: CGPoint(x: 530.81, y: 82.91))
          bezier2Path.addCurve(to: CGPoint(x: 532.58, y: 92.85), controlPoint1: CGPoint(x: 531.81, y: 87.96), controlPoint2: CGPoint(x: 532.25, y: 90.43))
          bezier2Path.addCurve(to: CGPoint(x: 533.74, y: 99.27), controlPoint1: CGPoint(x: 533.03, y: 95.16), controlPoint2: CGPoint(x: 533.41, y: 97.3))
          bezier2Path.addCurve(to: CGPoint(x: 534.74, y: 92.52), controlPoint1: CGPoint(x: 534.07, y: 97.19), controlPoint2: CGPoint(x: 534.4, y: 94.94))
          bezier2Path.addCurve(to: CGPoint(x: 536.23, y: 85.11), controlPoint1: CGPoint(x: 535.18, y: 90.1), controlPoint2: CGPoint(x: 535.68, y: 87.63))
          bezier2Path.addCurve(to: CGPoint(x: 537.88, y: 77.37), controlPoint1: CGPoint(x: 536.78, y: 82.47), controlPoint2: CGPoint(x: 537.33, y: 79.89))
          bezier2Path.addCurve(to: CGPoint(x: 539.87, y: 70.45), controlPoint1: CGPoint(x: 538.55, y: 74.84), controlPoint2: CGPoint(x: 539.21, y: 72.54))
          bezier2Path.addLine(to: CGPoint(x: 559.59, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 577.49, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 597.87, y: 70.78))
          bezier2Path.addCurve(to: CGPoint(x: 599.69, y: 77.86), controlPoint1: CGPoint(x: 598.53, y: 72.97), controlPoint2: CGPoint(x: 599.14, y: 75.34))
          bezier2Path.addCurve(to: CGPoint(x: 601.52, y: 85.6), controlPoint1: CGPoint(x: 600.36, y: 80.39), controlPoint2: CGPoint(x: 600.97, y: 82.97))
          bezier2Path.addCurve(to: CGPoint(x: 602.84, y: 93.01), controlPoint1: CGPoint(x: 602.07, y: 88.13), controlPoint2: CGPoint(x: 602.51, y: 90.6))
          bezier2Path.addCurve(to: CGPoint(x: 604, y: 99.27), controlPoint1: CGPoint(x: 603.29, y: 95.32), controlPoint2: CGPoint(x: 603.67, y: 97.41))
          bezier2Path.addCurve(to: CGPoint(x: 605.33, y: 90.38), controlPoint1: CGPoint(x: 604.33, y: 96.53), controlPoint2: CGPoint(x: 604.78, y: 93.56))
          bezier2Path.addCurve(to: CGPoint(x: 607.48, y: 80.33), controlPoint1: CGPoint(x: 605.99, y: 87.08), controlPoint2: CGPoint(x: 606.71, y: 83.74))
          bezier2Path.addCurve(to: CGPoint(x: 609.8, y: 70.45), controlPoint1: CGPoint(x: 608.26, y: 76.82), controlPoint2: CGPoint(x: 609.03, y: 73.52))
          bezier2Path.addLine(to: CGPoint(x: 627.2, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 645.43, y: 0.94))
          bezier2Path.close()
          bezier2Path.move(to: CGPoint(x: 751.72, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 733.82, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 733.82, y: 64.85))
          bezier2Path.addLine(to: CGPoint(x: 677.31, y: 64.85))
          bezier2Path.addLine(to: CGPoint(x: 677.31, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 659.42, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 659.42, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 677.31, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 677.31, y: 49.7))
          bezier2Path.addLine(to: CGPoint(x: 733.82, y: 49.7))
          bezier2Path.addLine(to: CGPoint(x: 733.82, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 751.72, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 751.72, y: 118.54))
          bezier2Path.close()
          bezier2Path.move(to: CGPoint(x: 853.8, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 841.2, y: 84.61))
          bezier2Path.addLine(to: CGPoint(x: 795.47, y: 84.61))
          bezier2Path.addLine(to: CGPoint(x: 782.88, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 764.32, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 809.22, y: 0.45))
          bezier2Path.addLine(to: CGPoint(x: 827.78, y: 0.45))
          bezier2Path.addLine(to: CGPoint(x: 872.52, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 853.8, y: 118.54))
          bezier2Path.close()
          bezier2Path.move(to: CGPoint(x: 824.3, y: 36.03))
          bezier2Path.addCurve(to: CGPoint(x: 822.48, y: 30.59), controlPoint1: CGPoint(x: 823.97, y: 34.82), controlPoint2: CGPoint(x: 823.36, y: 33.01))
          bezier2Path.addCurve(to: CGPoint(x: 820.16, y: 23.01), controlPoint1: CGPoint(x: 821.71, y: 28.06), controlPoint2: CGPoint(x: 820.94, y: 25.54))
          bezier2Path.addCurve(to: CGPoint(x: 818.34, y: 16.59), controlPoint1: CGPoint(x: 819.39, y: 20.38), controlPoint2: CGPoint(x: 818.78, y: 18.24))
          bezier2Path.addCurve(to: CGPoint(x: 816.35, y: 23.84), controlPoint1: CGPoint(x: 817.79, y: 18.79), controlPoint2: CGPoint(x: 817.12, y: 21.2))
          bezier2Path.addCurve(to: CGPoint(x: 814.36, y: 30.92), controlPoint1: CGPoint(x: 815.69, y: 26.36), controlPoint2: CGPoint(x: 815.02, y: 28.72))
          bezier2Path.addCurve(to: CGPoint(x: 812.7, y: 36.03), controlPoint1: CGPoint(x: 813.7, y: 33.01), controlPoint2: CGPoint(x: 813.15, y: 34.71))
          bezier2Path.addLine(to: CGPoint(x: 800.77, y: 69.13))
          bezier2Path.addLine(to: CGPoint(x: 836.23, y: 69.13))
          bezier2Path.addLine(to: CGPoint(x: 824.3, y: 36.03))
          bezier2Path.close()
          bezier2Path.move(to: CGPoint(x: 913.29, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 895.39, y: 118.54))
          bezier2Path.addLine(to: CGPoint(x: 895.39, y: 16.26))
          bezier2Path.addLine(to: CGPoint(x: 859.93, y: 16.26))
          bezier2Path.addLine(to: CGPoint(x: 859.93, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 948.75, y: 0.94))
          bezier2Path.addLine(to: CGPoint(x: 948.75, y: 16.26))
          bezier2Path.addLine(to: CGPoint(x: 913.29, y: 16.26))
          bezier2Path.addLine(to: CGPoint(x: 913.29, y: 118.54))
          bezier2Path.close()
          fillColor2.setFill()
          bezier2Path.fill()
          
          context.restoreGState()

      }
  
  @objc public enum ResizingBehavior: Int {
    case aspectFit /// The content is proportionally resized to fit into the target rectangle.
    case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
    case stretch /// The content is stretched to match the entire target rectangle.
    case center /// The content is centered in the target rectangle, but it is NOT resized.
    
    public func apply(rect: CGRect, target: CGRect) -> CGRect {
      if rect == target || target == CGRect.zero {
        return rect
      }
      
      var scales = CGSize.zero
      scales.width = abs(target.width / rect.width)
      scales.height = abs(target.height / rect.height)
      
      switch self {
      case .aspectFit:
        scales.width = min(scales.width, scales.height)
        scales.height = scales.width
      case .aspectFill:
        scales.width = max(scales.width, scales.height)
        scales.height = scales.width
      case .stretch:
        break
      case .center:
        scales.width = 1
        scales.height = 1
      }
      
      var result = rect.standardized
      result.size.width *= scales.width
      result.size.height *= scales.height
      result.origin.x = target.minX + (target.width - result.width) / 2
      result.origin.y = target.minY + (target.height - result.height) / 2
      return result
    }
  }
}



extension UIColor {
  func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
    var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
    var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1
    
    self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
    color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)
    
    return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
                   green: g1 * (1 - fraction) + g2 * fraction,
                   blue: b1 * (1 - fraction) + b2 * fraction,
                   alpha: a1 * (1 - fraction) + a2 * fraction);
  }
}
