//
//  CustomAlertSign.swift
//  ProjectName
//
//  Created by pavel on 18.10.17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

@IBDesignable
class CustomAlertStopSign: UIView {
    override func draw(_ rect: CGRect) {
        CustomAlertSignStyleKit.drawStopSign(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class CustomAlertCautionSign: UIView {
    override func draw(_ rect: CGRect) {
        CustomAlertSignStyleKit.drawCautionSign(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class CustomAlertCheckSign: UIView {
    override func draw(_ rect: CGRect) {
        CustomAlertSignStyleKit.drawOkSign(frame: rect, resizing: .aspectFit)
    }
}

public class CustomAlertSignStyleKit : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawStopSign(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 562, height: 562), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 562, height: 562), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 562, y: resizedFrame.height / 562)


        //// Color Declarations
        let fillColor = K_COLOR_RED//UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 258.54, y: 1.24))
        bezierPath.addCurve(to: CGPoint(x: 79.29, y: 85.99), controlPoint1: CGPoint(x: 191.34, y: 6.42), controlPoint2: CGPoint(x: 126.92, y: 36.94))
        bezierPath.addCurve(to: CGPoint(x: 0.77, y: 253.54), controlPoint1: CGPoint(x: 34.52, y: 132.12), controlPoint2: CGPoint(x: 8.27, y: 188.22))
        bezierPath.addCurve(to: CGPoint(x: 1.14, y: 313.17), controlPoint1: CGPoint(x: -0.66, y: 266.07), controlPoint2: CGPoint(x: -0.43, y: 299.89))
        bezierPath.addCurve(to: CGPoint(x: 63.32, y: 459.57), controlPoint1: CGPoint(x: 7.89, y: 368.14), controlPoint2: CGPoint(x: 28.37, y: 416.52))
        bezierPath.addCurve(to: CGPoint(x: 102.17, y: 498.57), controlPoint1: CGPoint(x: 71.87, y: 470.14), controlPoint2: CGPoint(x: 91.74, y: 490.09))
        bezierPath.addCurve(to: CGPoint(x: 280.67, y: 562.92), controlPoint1: CGPoint(x: 153.99, y: 540.64), controlPoint2: CGPoint(x: 215.72, y: 562.92))
        bezierPath.addCurve(to: CGPoint(x: 459.17, y: 498.57), controlPoint1: CGPoint(x: 345.62, y: 562.92), controlPoint2: CGPoint(x: 407.34, y: 540.64))
        bezierPath.addCurve(to: CGPoint(x: 497.57, y: 460.17), controlPoint1: CGPoint(x: 469.29, y: 490.32), controlPoint2: CGPoint(x: 489.32, y: 470.29))
        bezierPath.addCurve(to: CGPoint(x: 560.19, y: 313.17), controlPoint1: CGPoint(x: 532.82, y: 416.74), controlPoint2: CGPoint(x: 553.44, y: 368.37))
        bezierPath.addCurve(to: CGPoint(x: 560.57, y: 253.17), controlPoint1: CGPoint(x: 561.77, y: 299.67), controlPoint2: CGPoint(x: 561.99, y: 266.14))
        bezierPath.addCurve(to: CGPoint(x: 482.04, y: 85.99), controlPoint1: CGPoint(x: 553.14, y: 188.52), controlPoint2: CGPoint(x: 526.59, y: 131.82))
        bezierPath.addCurve(to: CGPoint(x: 258.54, y: 1.24), controlPoint1: CGPoint(x: 423.54, y: 25.77), controlPoint2: CGPoint(x: 342.02, y: -5.21))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 306.17, y: 64.62))
        bezierPath.addCurve(to: CGPoint(x: 359.42, y: 78.19), controlPoint1: CGPoint(x: 324.02, y: 66.87), controlPoint2: CGPoint(x: 342.62, y: 71.59))
        bezierPath.addCurve(to: CGPoint(x: 407.64, y: 103.77), controlPoint1: CGPoint(x: 374.64, y: 84.19), controlPoint2: CGPoint(x: 395.64, y: 95.29))
        bezierPath.addLine(to: CGPoint(x: 411.77, y: 106.69))
        bezierPath.addLine(to: CGPoint(x: 258.69, y: 259.77))
        bezierPath.addLine(to: CGPoint(x: 105.54, y: 412.92))
        bezierPath.addLine(to: CGPoint(x: 99.62, y: 403.84))
        bezierPath.addCurve(to: CGPoint(x: 74.87, y: 354.04), controlPoint1: CGPoint(x: 90.24, y: 389.44), controlPoint2: CGPoint(x: 80.94, y: 370.77))
        bezierPath.addCurve(to: CGPoint(x: 65.12, y: 244.54), controlPoint1: CGPoint(x: 62.27, y: 319.54), controlPoint2: CGPoint(x: 58.89, y: 281.74))
        bezierPath.addCurve(to: CGPoint(x: 109.37, y: 145.92), controlPoint1: CGPoint(x: 70.89, y: 209.97), controlPoint2: CGPoint(x: 86.79, y: 174.49))
        bezierPath.addCurve(to: CGPoint(x: 148.67, y: 107.52), controlPoint1: CGPoint(x: 117.17, y: 136.09), controlPoint2: CGPoint(x: 138.84, y: 114.87))
        bezierPath.addCurve(to: CGPoint(x: 306.17, y: 64.62), controlPoint1: CGPoint(x: 195.09, y: 72.87), controlPoint2: CGPoint(x: 250.89, y: 57.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 474.02, y: 181.02))
        bezierPath.addCurve(to: CGPoint(x: 499.14, y: 281.67), controlPoint1: CGPoint(x: 491.57, y: 215.52), controlPoint2: CGPoint(x: 499.07, y: 245.59))
        bezierPath.addCurve(to: CGPoint(x: 475.07, y: 381.42), controlPoint1: CGPoint(x: 499.22, y: 317.44), controlPoint2: CGPoint(x: 491.57, y: 349.17))
        bezierPath.addCurve(to: CGPoint(x: 448.44, y: 421.54), controlPoint1: CGPoint(x: 469.22, y: 392.89), controlPoint2: CGPoint(x: 456.92, y: 411.42))
        bezierPath.addCurve(to: CGPoint(x: 317.79, y: 497.22), controlPoint1: CGPoint(x: 414.92, y: 461.37), controlPoint2: CGPoint(x: 368.04, y: 488.52))
        bezierPath.addCurve(to: CGPoint(x: 239.04, y: 496.09), controlPoint1: CGPoint(x: 292.14, y: 501.57), controlPoint2: CGPoint(x: 264.09, y: 501.19))
        bezierPath.addCurve(to: CGPoint(x: 154.52, y: 460.17), controlPoint1: CGPoint(x: 210.02, y: 490.17), controlPoint2: CGPoint(x: 181.67, y: 478.09))
        bezierPath.addLine(to: CGPoint(x: 149.49, y: 456.79))
        bezierPath.addLine(to: CGPoint(x: 302.64, y: 303.64))
        bezierPath.addLine(to: CGPoint(x: 455.79, y: 150.42))
        bezierPath.addLine(to: CGPoint(x: 461.87, y: 159.87))
        bezierPath.addCurve(to: CGPoint(x: 474.02, y: 181.02), controlPoint1: CGPoint(x: 465.24, y: 165.04), controlPoint2: CGPoint(x: 470.72, y: 174.57))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawOkSign(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        
        //// Color Declarations
        let fillColor2 = K_COLOR_RED//UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 169.58, y: 5.69))
        bezierPath.addCurve(to: CGPoint(x: 73.37, y: 108.49), controlPoint1: CGPoint(x: 137.81, y: 30.61), controlPoint2: CGPoint(x: 103.36, y: 67.41))
        bezierPath.addCurve(to: CGPoint(x: 63.01, y: 120.56), controlPoint1: CGPoint(x: 67.39, y: 116.57), controlPoint2: CGPoint(x: 63.55, y: 121.05))
        bezierPath.addCurve(to: CGPoint(x: 14.55, y: 83.47), controlPoint1: CGPoint(x: 56.23, y: 115.01), controlPoint2: CGPoint(x: 15.08, y: 83.47))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 99.34), controlPoint1: CGPoint(x: 13.57, y: 83.47), controlPoint2: CGPoint(x: 0, y: 98.37))
        bezierPath.addCurve(to: CGPoint(x: 12.76, y: 119.3), controlPoint1: CGPoint(x: 0, y: 99.83), controlPoint2: CGPoint(x: 5.8, y: 108.78))
        bezierPath.addCurve(to: CGPoint(x: 57.03, y: 188.9), controlPoint1: CGPoint(x: 29.9, y: 144.9), controlPoint2: CGPoint(x: 48.91, y: 174.89))
        bezierPath.addCurve(to: CGPoint(x: 64.35, y: 200.1), controlPoint1: CGPoint(x: 60.6, y: 195.23), controlPoint2: CGPoint(x: 63.91, y: 200.2))
        bezierPath.addCurve(to: CGPoint(x: 77.92, y: 176.44), controlPoint1: CGPoint(x: 64.71, y: 199.9), controlPoint2: CGPoint(x: 70.78, y: 189.29))
        bezierPath.addCurve(to: CGPoint(x: 189.49, y: 11.43), controlPoint1: CGPoint(x: 118.8, y: 102.16), controlPoint2: CGPoint(x: 155.39, y: 48.13))
        bezierPath.addLine(to: CGPoint(x: 200.38, y: -0.25))
        bezierPath.addLine(to: CGPoint(x: 188.77, y: -0.25))
        bezierPath.addLine(to: CGPoint(x: 177.17, y: -0.25))
        bezierPath.addLine(to: CGPoint(x: 169.58, y: 5.69))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawCautionSign(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 267, height: 267), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 267, height: 267), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 267, y: resizedFrame.height / 267)
        
        
        //// Color Declarations
        let fillColor2 = K_COLOR_RED//UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 120.64, y: 15.82))
        bezier4Path.addCurve(to: CGPoint(x: 112.46, y: 21.6), controlPoint1: CGPoint(x: 118.32, y: 16.76), controlPoint2: CGPoint(x: 114.64, y: 19.45))
        bezier4Path.addCurve(to: CGPoint(x: 2.45, y: 211.64), controlPoint1: CGPoint(x: 109.33, y: 24.56), controlPoint2: CGPoint(x: 16.9, y: 184.47))
        bezier4Path.addCurve(to: CGPoint(x: 0, y: 224.82), controlPoint1: CGPoint(x: 0.82, y: 214.59), controlPoint2: CGPoint(x: 0, y: 219.17))
        bezier4Path.addCurve(to: CGPoint(x: 16.36, y: 251.44), controlPoint1: CGPoint(x: 0, y: 237.46), controlPoint2: CGPoint(x: 4.91, y: 245.39))
        bezier4Path.addCurve(to: CGPoint(x: 133.59, y: 254), controlPoint1: CGPoint(x: 20.86, y: 253.87), controlPoint2: CGPoint(x: 26.45, y: 254))
        bezier4Path.addLine(to: CGPoint(x: 246.05, y: 254))
        bezier4Path.addLine(to: CGPoint(x: 251.5, y: 251.04))
        bezier4Path.addCurve(to: CGPoint(x: 266.91, y: 223.2), controlPoint1: CGPoint(x: 263.23, y: 244.85), controlPoint2: CGPoint(x: 267.72, y: 236.65))
        bezier4Path.addLine(to: CGPoint(x: 266.36, y: 213.65))
        bezier4Path.addLine(to: CGPoint(x: 212.93, y: 120.18))
        bezier4Path.addCurve(to: CGPoint(x: 155.26, y: 22.14), controlPoint1: CGPoint(x: 183.62, y: 68.81), controlPoint2: CGPoint(x: 157.58, y: 24.69))
        bezier4Path.addCurve(to: CGPoint(x: 146.4, y: 15.82), controlPoint1: CGPoint(x: 152.95, y: 19.72), controlPoint2: CGPoint(x: 148.86, y: 16.89))
        bezier4Path.addCurve(to: CGPoint(x: 120.64, y: 15.82), controlPoint1: CGPoint(x: 140.68, y: 13.39), controlPoint2: CGPoint(x: 126.09, y: 13.39))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 143.27, y: 28.46))
        bezier4Path.addCurve(to: CGPoint(x: 205.29, y: 132.29), controlPoint1: CGPoint(x: 147.63, y: 30.88), controlPoint2: CGPoint(x: 144.77, y: 26.04))
        bezier4Path.addCurve(to: CGPoint(x: 252.18, y: 234.5), controlPoint1: CGPoint(x: 259.82, y: 227.91), controlPoint2: CGPoint(x: 258.73, y: 225.49))
        bezier4Path.addCurve(to: CGPoint(x: 133.32, y: 242.57), controlPoint1: CGPoint(x: 246.19, y: 242.84), controlPoint2: CGPoint(x: 250.28, y: 242.57))
        bezier4Path.addCurve(to: CGPoint(x: 21.95, y: 240.15), controlPoint1: CGPoint(x: 34.35, y: 242.57), controlPoint2: CGPoint(x: 26.17, y: 242.43))
        bezier4Path.addCurve(to: CGPoint(x: 11.86, y: 225.49), controlPoint1: CGPoint(x: 15.54, y: 237.05), controlPoint2: CGPoint(x: 12, y: 231.81))
        bezier4Path.addCurve(to: CGPoint(x: 64.75, y: 127.17), controlPoint1: CGPoint(x: 11.72, y: 221.18), controlPoint2: CGPoint(x: 19.36, y: 206.79))
        bezier4Path.addCurve(to: CGPoint(x: 121.18, y: 30.61), controlPoint1: CGPoint(x: 94.06, y: 75.8), controlPoint2: CGPoint(x: 119.41, y: 32.49))
        bezier4Path.addCurve(to: CGPoint(x: 143.27, y: 28.46), controlPoint1: CGPoint(x: 127.05, y: 24.83), controlPoint2: CGPoint(x: 135.36, y: 23.89))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 124.05, y: 74.72))
        bezier4Path.addCurve(to: CGPoint(x: 118.46, y: 119.51), controlPoint1: CGPoint(x: 111.92, y: 80.78), controlPoint2: CGPoint(x: 110.96, y: 88.17))
        bezier4Path.addCurve(to: CGPoint(x: 125.82, y: 154.48), controlPoint1: CGPoint(x: 120.64, y: 129.06), controlPoint2: CGPoint(x: 124.05, y: 144.79))
        bezier4Path.addLine(to: CGPoint(x: 129.09, y: 171.96))
        bezier4Path.addLine(to: CGPoint(x: 133.59, y: 171.96))
        bezier4Path.addLine(to: CGPoint(x: 138.09, y: 171.96))
        bezier4Path.addLine(to: CGPoint(x: 141.36, y: 154.48))
        bezier4Path.addCurve(to: CGPoint(x: 148.72, y: 119.51), controlPoint1: CGPoint(x: 143.13, y: 144.79), controlPoint2: CGPoint(x: 146.54, y: 129.06))
        bezier4Path.addCurve(to: CGPoint(x: 151.58, y: 82.52), controlPoint1: CGPoint(x: 154.31, y: 96.11), controlPoint2: CGPoint(x: 154.99, y: 88.58))
        bezier4Path.addCurve(to: CGPoint(x: 133.59, y: 71.76), controlPoint1: CGPoint(x: 148.86, y: 77.41), controlPoint2: CGPoint(x: 139.45, y: 71.76))
        bezier4Path.addCurve(to: CGPoint(x: 124.05, y: 74.72), controlPoint1: CGPoint(x: 131.68, y: 71.76), controlPoint2: CGPoint(x: 127.32, y: 73.11))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 123.09, y: 186.08))
        bezier4Path.addCurve(to: CGPoint(x: 133.45, y: 221.59), controlPoint1: CGPoint(x: 105.78, y: 196.44), controlPoint2: CGPoint(x: 113.14, y: 221.59))
        bezier4Path.addCurve(to: CGPoint(x: 144.63, y: 186.49), controlPoint1: CGPoint(x: 153.63, y: 221.59), controlPoint2: CGPoint(x: 161.26, y: 197.38))
        bezier4Path.addCurve(to: CGPoint(x: 123.09, y: 186.08), controlPoint1: CGPoint(x: 138.77, y: 182.59), controlPoint2: CGPoint(x: 129.23, y: 182.32))
        bezier4Path.close()
        fillColor2.setFill()
        bezier4Path.fill()
        
        context.restoreGState()
        
    }



    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
