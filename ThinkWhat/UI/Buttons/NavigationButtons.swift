//
//  NavigationButtons.swift
//  ThinkWhat
//
//  Created by Pavel Bukharov on 17.08.2020.
//  Copyright © 2020 Pavel Bukharov. All rights reserved.
//

//
//  NavButtonsStyleKit.swift
//  ProjectName
//
//  Created by pavel on 17.08.2020.
//  Copyright © 2020 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

@IBDesignable
class Megaphone: UIView {
    override func draw(_ rect: CGRect) {
        NavButtonsStyleKit.drawMegaphone_2(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class Filter: UIView {
    override func draw(_ rect: CGRect) {
        NavButtonsStyleKit.drawFilter(frame: rect, resizing: .aspectFit)
    }
}


public class NavButtonsStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc public dynamic class func drawMegaphone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        
        //// Color Declarations
        let fillColor = K_COLOR_RED//let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 148.14, y: 26.05))
        bezierPath.addCurve(to: CGPoint(x: 143.44, y: 29.86), controlPoint1: CGPoint(x: 146.34, y: 26.52), controlPoint2: CGPoint(x: 144.44, y: 28.06))
        bezierPath.addLine(to: CGPoint(x: 142.47, y: 31.6))
        bezierPath.addLine(to: CGPoint(x: 142.47, y: 92.9))
        bezierPath.addLine(to: CGPoint(x: 142.47, y: 154.2))
        bezierPath.addLine(to: CGPoint(x: 143.4, y: 155.87))
        bezierPath.addCurve(to: CGPoint(x: 149.71, y: 159.95), controlPoint1: CGPoint(x: 144.74, y: 158.28), controlPoint2: CGPoint(x: 146.97, y: 159.75))
        bezierPath.addCurve(to: CGPoint(x: 153.18, y: 159.75), controlPoint1: CGPoint(x: 150.88, y: 160.05), controlPoint2: CGPoint(x: 152.42, y: 159.95))
        bezierPath.addCurve(to: CGPoint(x: 158.19, y: 155.24), controlPoint1: CGPoint(x: 155.02, y: 159.25), controlPoint2: CGPoint(x: 157.26, y: 157.24))
        bezierPath.addLine(to: CGPoint(x: 158.99, y: 153.53))
        bezierPath.addLine(to: CGPoint(x: 158.99, y: 134.76))
        bezierPath.addLine(to: CGPoint(x: 158.99, y: 115.98))
        bezierPath.addLine(to: CGPoint(x: 162.06, y: 114.41))
        bezierPath.addCurve(to: CGPoint(x: 173.91, y: 100.42), controlPoint1: CGPoint(x: 167.57, y: 111.54), controlPoint2: CGPoint(x: 171.95, y: 106.36))
        bezierPath.addCurve(to: CGPoint(x: 174.35, y: 87.02), controlPoint1: CGPoint(x: 175.12, y: 96.71), controlPoint2: CGPoint(x: 175.32, y: 90.86))
        bezierPath.addCurve(to: CGPoint(x: 162.1, y: 71.42), controlPoint1: CGPoint(x: 172.68, y: 80.27), controlPoint2: CGPoint(x: 168.14, y: 74.53))
        bezierPath.addLine(to: CGPoint(x: 159.03, y: 69.82))
        bezierPath.addLine(to: CGPoint(x: 158.93, y: 50.54))
        bezierPath.addLine(to: CGPoint(x: 158.83, y: 31.26))
        bezierPath.addLine(to: CGPoint(x: 157.86, y: 29.73))
        bezierPath.addCurve(to: CGPoint(x: 155.32, y: 27.12), controlPoint1: CGPoint(x: 157.32, y: 28.89), controlPoint2: CGPoint(x: 156.19, y: 27.72))
        bezierPath.addCurve(to: CGPoint(x: 151.45, y: 25.92), controlPoint1: CGPoint(x: 154.02, y: 26.25), controlPoint2: CGPoint(x: 153.35, y: 26.02))
        bezierPath.addCurve(to: CGPoint(x: 148.14, y: 26.05), controlPoint1: CGPoint(x: 150.18, y: 25.85), controlPoint2: CGPoint(x: 148.68, y: 25.88))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 135.42, y: 38.35))
        bezier2Path.addCurve(to: CGPoint(x: 126.08, y: 47.8), controlPoint1: CGPoint(x: 133.32, y: 40.98), controlPoint2: CGPoint(x: 128.95, y: 45.39))
        bezier2Path.addCurve(to: CGPoint(x: 92.59, y: 62), controlPoint1: CGPoint(x: 116.9, y: 55.52), controlPoint2: CGPoint(x: 106.81, y: 59.79))
        bezier2Path.addCurve(to: CGPoint(x: 64.35, y: 63.7), controlPoint1: CGPoint(x: 85.12, y: 63.17), controlPoint2: CGPoint(x: 79.81, y: 63.47))
        bezier2Path.addCurve(to: CGPoint(x: 44.15, y: 65.71), controlPoint1: CGPoint(x: 49.66, y: 63.94), controlPoint2: CGPoint(x: 47.69, y: 64.1))
        bezier2Path.addCurve(to: CGPoint(x: 37.94, y: 71.99), controlPoint1: CGPoint(x: 41.75, y: 66.78), controlPoint2: CGPoint(x: 39.11, y: 69.45))
        bezier2Path.addLine(to: CGPoint(x: 37.14, y: 73.76))
        bezier2Path.addLine(to: CGPoint(x: 34.87, y: 73.92))
        bezier2Path.addCurve(to: CGPoint(x: 26.09, y: 79.6), controlPoint1: CGPoint(x: 31.07, y: 74.19), controlPoint2: CGPoint(x: 27.93, y: 76.23))
        bezier2Path.addLine(to: CGPoint(x: 24.96, y: 81.71))
        bezier2Path.addLine(to: CGPoint(x: 24.96, y: 92.9))
        bezier2Path.addLine(to: CGPoint(x: 24.96, y: 104.09))
        bezier2Path.addLine(to: CGPoint(x: 25.86, y: 105.83))
        bezier2Path.addCurve(to: CGPoint(x: 34.57, y: 111.87), controlPoint1: CGPoint(x: 27.7, y: 109.27), controlPoint2: CGPoint(x: 30.83, y: 111.47))
        bezier2Path.addCurve(to: CGPoint(x: 36.98, y: 113.44), controlPoint1: CGPoint(x: 36.54, y: 112.11), controlPoint2: CGPoint(x: 36.58, y: 112.11))
        bezier2Path.addCurve(to: CGPoint(x: 48.99, y: 122.5), controlPoint1: CGPoint(x: 38.68, y: 119.19), controlPoint2: CGPoint(x: 42.25, y: 121.86))
        bezier2Path.addCurve(to: CGPoint(x: 51.43, y: 122.8), controlPoint1: CGPoint(x: 50.3, y: 122.63), controlPoint2: CGPoint(x: 51.36, y: 122.77))
        bezier2Path.addCurve(to: CGPoint(x: 56.67, y: 156.21), controlPoint1: CGPoint(x: 52.1, y: 123.4), controlPoint2: CGPoint(x: 55.3, y: 143.81))
        bezier2Path.addCurve(to: CGPoint(x: 57.01, y: 159.21), controlPoint1: CGPoint(x: 56.81, y: 157.31), controlPoint2: CGPoint(x: 56.94, y: 158.64))
        bezier2Path.addCurve(to: CGPoint(x: 57.67, y: 165.23), controlPoint1: CGPoint(x: 57.41, y: 162.52), controlPoint2: CGPoint(x: 57.51, y: 163.42))
        bezier2Path.addCurve(to: CGPoint(x: 60.85, y: 174.18), controlPoint1: CGPoint(x: 58.17, y: 170.2), controlPoint2: CGPoint(x: 59.04, y: 172.68))
        bezier2Path.addCurve(to: CGPoint(x: 73.63, y: 176.08), controlPoint1: CGPoint(x: 62.78, y: 175.82), controlPoint2: CGPoint(x: 64.52, y: 176.08))
        bezier2Path.addCurve(to: CGPoint(x: 84.78, y: 173.95), controlPoint1: CGPoint(x: 82.88, y: 176.08), controlPoint2: CGPoint(x: 83.78, y: 175.92))
        bezier2Path.addCurve(to: CGPoint(x: 83.31, y: 156.07), controlPoint1: CGPoint(x: 85.92, y: 171.74), controlPoint2: CGPoint(x: 85.45, y: 165.79))
        bezier2Path.addCurve(to: CGPoint(x: 82.08, y: 149.93), controlPoint1: CGPoint(x: 82.64, y: 153.03), controlPoint2: CGPoint(x: 82.11, y: 150.26))
        bezier2Path.addCurve(to: CGPoint(x: 84.21, y: 148.39), controlPoint1: CGPoint(x: 82.04, y: 149.49), controlPoint2: CGPoint(x: 82.64, y: 149.06))
        bezier2Path.addCurve(to: CGPoint(x: 93.56, y: 140.34), controlPoint1: CGPoint(x: 88.62, y: 146.52), controlPoint2: CGPoint(x: 91.79, y: 143.81))
        bezier2Path.addCurve(to: CGPoint(x: 92.56, y: 127.71), controlPoint1: CGPoint(x: 95.2, y: 137.16), controlPoint2: CGPoint(x: 94.8, y: 131.85))
        bezier2Path.addLine(to: CGPoint(x: 91.62, y: 125.97))
        bezier2Path.addLine(to: CGPoint(x: 92.46, y: 125.97))
        bezier2Path.addCurve(to: CGPoint(x: 105.78, y: 129.01), controlPoint1: CGPoint(x: 94.16, y: 125.97), controlPoint2: CGPoint(x: 101.81, y: 127.71))
        bezier2Path.addCurve(to: CGPoint(x: 134.12, y: 146.32), controlPoint1: CGPoint(x: 117.2, y: 132.72), controlPoint2: CGPoint(x: 126.01, y: 138.1))
        bezier2Path.addCurve(to: CGPoint(x: 137.19, y: 149.02), controlPoint1: CGPoint(x: 135.59, y: 147.82), controlPoint2: CGPoint(x: 136.96, y: 149.02))
        bezier2Path.addCurve(to: CGPoint(x: 137.63, y: 92.9), controlPoint1: CGPoint(x: 137.56, y: 149.02), controlPoint2: CGPoint(x: 137.63, y: 138.13))
        bezier2Path.addCurve(to: CGPoint(x: 137.16, y: 36.78), controlPoint1: CGPoint(x: 137.63, y: 45.43), controlPoint2: CGPoint(x: 137.56, y: 36.78))
        bezier2Path.addCurve(to: CGPoint(x: 135.42, y: 38.35), controlPoint1: CGPoint(x: 136.93, y: 36.78), controlPoint2: CGPoint(x: 136.12, y: 37.48))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawMegaphone_2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        
        //// Color Declarations
        let fillColor = K_COLOR_RED//let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 124.26, y: 32.1))
        bezierPath.addCurve(to: CGPoint(x: 73.55, y: 54.9), controlPoint1: CGPoint(x: 115.45, y: 41.42), controlPoint2: CGPoint(x: 96.17, y: 50.12))
        bezierPath.addCurve(to: CGPoint(x: 62.36, y: 54.41), controlPoint1: CGPoint(x: 64.14, y: 56.86), controlPoint2: CGPoint(x: 64.02, y: 56.86))
        bezierPath.addCurve(to: CGPoint(x: 39.38, y: 51.84), controlPoint1: CGPoint(x: 60.81, y: 51.96), controlPoint2: CGPoint(x: 59.62, y: 51.84))
        bezierPath.addLine(to: CGPoint(x: 17.95, y: 51.84))
        bezierPath.addLine(to: CGPoint(x: 13.9, y: 56.01))
        bezierPath.addCurve(to: CGPoint(x: 9.86, y: 66.43), controlPoint1: CGPoint(x: 10.33, y: 59.68), controlPoint2: CGPoint(x: 9.86, y: 60.91))
        bezierPath.addCurve(to: CGPoint(x: 6.52, y: 72.68), controlPoint1: CGPoint(x: 9.86, y: 72.44), controlPoint2: CGPoint(x: 9.74, y: 72.68))
        bezierPath.addCurve(to: CGPoint(x: 0.33, y: 86.78), controlPoint1: CGPoint(x: 1.17, y: 72.68), controlPoint2: CGPoint(x: 0.33, y: 74.64))
        bezierPath.addCurve(to: CGPoint(x: 6.52, y: 100.88), controlPoint1: CGPoint(x: 0.33, y: 98.92), controlPoint2: CGPoint(x: 1.17, y: 100.88))
        bezierPath.addCurve(to: CGPoint(x: 9.86, y: 105.79), controlPoint1: CGPoint(x: 9.62, y: 100.88), controlPoint2: CGPoint(x: 9.86, y: 101.25))
        bezierPath.addCurve(to: CGPoint(x: 22.71, y: 121.24), controlPoint1: CGPoint(x: 9.86, y: 114.98), controlPoint2: CGPoint(x: 13.9, y: 119.77))
        bezierPath.addLine(to: CGPoint(x: 27.36, y: 121.97))
        bezierPath.addLine(to: CGPoint(x: 34.26, y: 146.13))
        bezierPath.addCurve(to: CGPoint(x: 42.83, y: 172.98), controlPoint1: CGPoint(x: 38.07, y: 159.37), controlPoint2: CGPoint(x: 42, y: 171.39))
        bezierPath.addCurve(to: CGPoint(x: 48.9, y: 175.43), controlPoint1: CGPoint(x: 44.14, y: 175.31), controlPoint2: CGPoint(x: 45.33, y: 175.8))
        bezierPath.addCurve(to: CGPoint(x: 53.19, y: 146.86), controlPoint1: CGPoint(x: 56.17, y: 174.82), controlPoint2: CGPoint(x: 56.52, y: 172.49))
        bezierPath.addCurve(to: CGPoint(x: 50.33, y: 123.2), controlPoint1: CGPoint(x: 51.64, y: 134.72), controlPoint2: CGPoint(x: 50.33, y: 124.06))
        bezierPath.addCurve(to: CGPoint(x: 54.5, y: 121.73), controlPoint1: CGPoint(x: 50.33, y: 122.34), controlPoint2: CGPoint(x: 52, y: 121.73))
        bezierPath.addCurve(to: CGPoint(x: 61.88, y: 118.54), controlPoint1: CGPoint(x: 57.48, y: 121.73), controlPoint2: CGPoint(x: 59.74, y: 120.75))
        bezierPath.addCurve(to: CGPoint(x: 72.6, y: 116.7), controlPoint1: CGPoint(x: 64.98, y: 115.35), controlPoint2: CGPoint(x: 65.21, y: 115.23))
        bezierPath.addCurve(to: CGPoint(x: 122.36, y: 137.67), controlPoint1: CGPoint(x: 91.05, y: 120.13), controlPoint2: CGPoint(x: 120.81, y: 132.76))
        bezierPath.addCurve(to: CGPoint(x: 133.67, y: 146.25), controlPoint1: CGPoint(x: 123.55, y: 141.35), controlPoint2: CGPoint(x: 129.98, y: 146.25))
        bezierPath.addCurve(to: CGPoint(x: 148.31, y: 126.88), controlPoint1: CGPoint(x: 138.67, y: 146.25), controlPoint2: CGPoint(x: 144.62, y: 138.4))
        bezierPath.addCurve(to: CGPoint(x: 138.9, y: 28.66), controlPoint1: CGPoint(x: 158.67, y: 94.75), controlPoint2: CGPoint(x: 153.43, y: 40.43))
        bezierPath.addCurve(to: CGPoint(x: 124.26, y: 32.1), controlPoint1: CGPoint(x: 133.9, y: 24.62), controlPoint2: CGPoint(x: 130.57, y: 25.35))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 136.64, y: 55.88))
        bezierPath.addCurve(to: CGPoint(x: 135.21, y: 122.1), controlPoint1: CGPoint(x: 140.93, y: 74.28), controlPoint2: CGPoint(x: 140.21, y: 104.93))
        bezierPath.addLine(to: CGPoint(x: 133.31, y: 128.47))
        bezierPath.addLine(to: CGPoint(x: 131.05, y: 121.73))
        bezierPath.addCurve(to: CGPoint(x: 128.79, y: 99.66), controlPoint1: CGPoint(x: 128.19, y: 113.27), controlPoint2: CGPoint(x: 126.76, y: 99.66))
        bezierPath.addCurve(to: CGPoint(x: 132.48, y: 95.61), controlPoint1: CGPoint(x: 129.5, y: 99.66), controlPoint2: CGPoint(x: 131.17, y: 97.82))
        bezierPath.addCurve(to: CGPoint(x: 129.02, y: 72.8), controlPoint1: CGPoint(x: 136.64, y: 88.5), controlPoint2: CGPoint(x: 134.86, y: 75.99))
        bezierPath.addCurve(to: CGPoint(x: 127.83, y: 65.33), controlPoint1: CGPoint(x: 127.12, y: 71.7), controlPoint2: CGPoint(x: 127, y: 70.72))
        bezierPath.addCurve(to: CGPoint(x: 133.67, y: 46.32), controlPoint1: CGPoint(x: 129.26, y: 55.88), controlPoint2: CGPoint(x: 132.48, y: 45.58))
        bezierPath.addCurve(to: CGPoint(x: 136.64, y: 55.88), controlPoint1: CGPoint(x: 134.14, y: 46.69), controlPoint2: CGPoint(x: 135.57, y: 50.98))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 177.12, y: 55.64))
        bezier2Path.addCurve(to: CGPoint(x: 162.48, y: 66.31), controlPoint1: CGPoint(x: 163.07, y: 61.52), controlPoint2: CGPoint(x: 162, y: 62.26))
        bezier2Path.addCurve(to: CGPoint(x: 189.38, y: 63.36), controlPoint1: CGPoint(x: 163.31, y: 73.17), controlPoint2: CGPoint(x: 169.02, y: 72.56))
        bezier2Path.addCurve(to: CGPoint(x: 195.57, y: 56.86), controlPoint1: CGPoint(x: 194.86, y: 60.91), controlPoint2: CGPoint(x: 195.57, y: 60.18))
        bezier2Path.addCurve(to: CGPoint(x: 193.31, y: 51.84), controlPoint1: CGPoint(x: 195.57, y: 54.41), controlPoint2: CGPoint(x: 194.74, y: 52.7))
        bezier2Path.addCurve(to: CGPoint(x: 177.12, y: 55.64), controlPoint1: CGPoint(x: 190.21, y: 50.12), controlPoint2: CGPoint(x: 190.57, y: 50.12))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 167.95, y: 81.39))
        bezier3Path.addCurve(to: CGPoint(x: 168.07, y: 91.07), controlPoint1: CGPoint(x: 164.98, y: 83.1), controlPoint2: CGPoint(x: 165.1, y: 89.36))
        bezier3Path.addCurve(to: CGPoint(x: 183.55, y: 92.3), controlPoint1: CGPoint(x: 169.38, y: 91.69), controlPoint2: CGPoint(x: 176.29, y: 92.3))
        bezier3Path.addCurve(to: CGPoint(x: 200.33, y: 86.29), controlPoint1: CGPoint(x: 197.24, y: 92.3), controlPoint2: CGPoint(x: 200.33, y: 91.2))
        bezier3Path.addCurve(to: CGPoint(x: 182.95, y: 80.04), controlPoint1: CGPoint(x: 200.33, y: 81.39), controlPoint2: CGPoint(x: 196.76, y: 80.04))
        bezier3Path.addCurve(to: CGPoint(x: 167.95, y: 81.39), controlPoint1: CGPoint(x: 175.81, y: 80.04), controlPoint2: CGPoint(x: 169.02, y: 80.65))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
        
        
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 164.14, y: 102.84))
        bezier4Path.addCurve(to: CGPoint(x: 163.9, y: 110.57), controlPoint1: CGPoint(x: 161.76, y: 105.17), controlPoint2: CGPoint(x: 161.64, y: 108.73))
        bezier4Path.addCurve(to: CGPoint(x: 190.81, y: 121.73), controlPoint1: CGPoint(x: 166.17, y: 112.53), controlPoint2: CGPoint(x: 188.43, y: 121.73))
        bezier4Path.addCurve(to: CGPoint(x: 193.9, y: 112.04), controlPoint1: CGPoint(x: 195.1, y: 121.73), controlPoint2: CGPoint(x: 197.36, y: 114.98))
        bezier4Path.addCurve(to: CGPoint(x: 167.48, y: 100.88), controlPoint1: CGPoint(x: 191.88, y: 110.32), controlPoint2: CGPoint(x: 169.5, y: 100.88))
        bezier4Path.addCurve(to: CGPoint(x: 164.14, y: 102.84), controlPoint1: CGPoint(x: 166.64, y: 100.88), controlPoint2: CGPoint(x: 165.1, y: 101.74))
        bezier4Path.close()
        fillColor.setFill()
        bezier4Path.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawFilter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        
        //// Color Declarations
        let fillColor = K_COLOR_RED//let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 165.44, y: 37.66))
        bezierPath.addCurve(to: CGPoint(x: 164.13, y: 44.22), controlPoint1: CGPoint(x: 166.5, y: 40.22), controlPoint2: CGPoint(x: 166.06, y: 42.41))
        bezierPath.addLine(to: CGPoint(x: 117.97, y: 90.44))
        bezierPath.addLine(to: CGPoint(x: 117.97, y: 160))
        bezierPath.addCurve(to: CGPoint(x: 114.31, y: 165.53), controlPoint1: CGPoint(x: 117.97, y: 162.62), controlPoint2: CGPoint(x: 116.75, y: 164.47))
        bezierPath.addCurve(to: CGPoint(x: 111.97, y: 166), controlPoint1: CGPoint(x: 113.5, y: 165.84), controlPoint2: CGPoint(x: 112.72, y: 166))
        bezierPath.addCurve(to: CGPoint(x: 107.76, y: 164.22), controlPoint1: CGPoint(x: 110.29, y: 166), controlPoint2: CGPoint(x: 108.88, y: 165.41))
        bezierPath.addLine(to: CGPoint(x: 83.79, y: 140.22))
        bezierPath.addCurve(to: CGPoint(x: 82.01, y: 136), controlPoint1: CGPoint(x: 82.61, y: 139.03), controlPoint2: CGPoint(x: 82.01, y: 137.62))
        bezierPath.addLine(to: CGPoint(x: 82.01, y: 90.44))
        bezierPath.addLine(to: CGPoint(x: 35.85, y: 44.22))
        bezierPath.addCurve(to: CGPoint(x: 34.54, y: 37.66), controlPoint1: CGPoint(x: 33.92, y: 42.41), controlPoint2: CGPoint(x: 33.48, y: 40.22))
        bezierPath.addCurve(to: CGPoint(x: 40.07, y: 34), controlPoint1: CGPoint(x: 35.6, y: 35.22), controlPoint2: CGPoint(x: 37.45, y: 34))
        bezierPath.addLine(to: CGPoint(x: 159.91, y: 34))
        bezierPath.addCurve(to: CGPoint(x: 165.44, y: 37.66), controlPoint1: CGPoint(x: 162.53, y: 34), controlPoint2: CGPoint(x: 164.38, y: 35.22))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    
    
    
    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

