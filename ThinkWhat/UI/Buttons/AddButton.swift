//
//  AddButton.swift
//  ProjectName
//
//  Created by pavel on 25.11.2019.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

@IBDesignable
class AddButton: UIView {
    override func draw(_ rect: CGRect) {
        AddButtonStyleKit.drawCanvas1(frame: rect, resizing: .aspectFit)
    }
}

public class AddButtonStyleKit : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 35.03, y: 21.71), controlPoint1: CGPoint(x: 44.59, y: 18), controlPoint2: CGPoint(x: 39.49, y: 19.34))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 50), controlPoint1: CGPoint(x: 24.9, y: 27.08), controlPoint2: CGPoint(x: 18, y: 37.74))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 82), controlPoint1: CGPoint(x: 18, y: 67.67), controlPoint2: CGPoint(x: 32.33, y: 82))
        bezierPath.addCurve(to: CGPoint(x: 82, y: 50), controlPoint1: CGPoint(x: 67.67, y: 82), controlPoint2: CGPoint(x: 82, y: 67.67))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 18), controlPoint1: CGPoint(x: 82, y: 32.33), controlPoint2: CGPoint(x: 67.67, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 90, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 90), controlPoint1: CGPoint(x: 90, y: 72.09), controlPoint2: CGPoint(x: 72.09, y: 90))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 50), controlPoint1: CGPoint(x: 27.91, y: 90), controlPoint2: CGPoint(x: 10, y: 72.09))
        bezierPath.addCurve(to: CGPoint(x: 28.58, y: 16.21), controlPoint1: CGPoint(x: 10, y: 35.79), controlPoint2: CGPoint(x: 17.41, y: 23.3))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 10), controlPoint1: CGPoint(x: 34.78, y: 12.28), controlPoint2: CGPoint(x: 42.12, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 90, y: 50), controlPoint1: CGPoint(x: 72.09, y: 10), controlPoint2: CGPoint(x: 90, y: 27.91))
        bezierPath.close()
        //        UIColor.gray.setFill()
        K_COLOR_RED.setFill()
        bezierPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 26, y: 45, width: 49, height: 10), cornerRadius: 4)
        //        UIColor.gray.setFill()
        K_COLOR_RED.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 45, y: 74)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 49, height: 10), cornerRadius: 4)
//        UIColor.gray.setFill()
        K_COLOR_RED.setFill()
        rectangle2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
