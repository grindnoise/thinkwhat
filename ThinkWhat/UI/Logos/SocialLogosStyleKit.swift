//
//  SocialLogosStyleKit.swift
//  SpamGuard
//
//  Created by pavel on 25.12.2018.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//  



import UIKit

@IBDesignable
class GoogleLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawGoogle(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class InstagramLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawInstagram(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class VKLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawVK(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class FacebookLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawFacebook(frame: rect, resizing: .aspectFit)
    }
}

public class SocialLogosStyleKit : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawInstagram(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 264, height: 264), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 264, height: 264), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 264, y: resizedFrame.height / 264)


        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 65.43, y: 1.46))
        bezier4Path.addCurve(to: CGPoint(x: 1.46, y: 65.96), controlPoint1: CGPoint(x: 32.66, y: 7.01), controlPoint2: CGPoint(x: 6.78, y: 33.03))
        bezier4Path.addCurve(to: CGPoint(x: 1.46, y: 198.71), controlPoint1: CGPoint(x: -0.19, y: 75.93), controlPoint2: CGPoint(x: -0.19, y: 188.73))
        bezier4Path.addCurve(to: CGPoint(x: 65.96, y: 263.21), controlPoint1: CGPoint(x: 6.86, y: 231.93), controlPoint2: CGPoint(x: 32.73, y: 257.81))
        bezier4Path.addCurve(to: CGPoint(x: 198.71, y: 263.21), controlPoint1: CGPoint(x: 75.93, y: 264.86), controlPoint2: CGPoint(x: 188.73, y: 264.86))
        bezier4Path.addCurve(to: CGPoint(x: 263.21, y: 198.71), controlPoint1: CGPoint(x: 231.93, y: 257.81), controlPoint2: CGPoint(x: 257.81, y: 231.93))
        bezier4Path.addCurve(to: CGPoint(x: 263.21, y: 65.96), controlPoint1: CGPoint(x: 264.86, y: 188.73), controlPoint2: CGPoint(x: 264.86, y: 75.93))
        bezier4Path.addCurve(to: CGPoint(x: 198.71, y: 1.46), controlPoint1: CGPoint(x: 257.81, y: 32.73), controlPoint2: CGPoint(x: 231.93, y: 6.86))
        bezier4Path.addCurve(to: CGPoint(x: 65.43, y: 1.46), controlPoint1: CGPoint(x: 189.48, y: -0.04), controlPoint2: CGPoint(x: 74.43, y: -0.04))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 197.43, y: 25.53))
        bezier4Path.addCurve(to: CGPoint(x: 209.96, y: 29.96), controlPoint1: CGPoint(x: 200.73, y: 26.13), controlPoint2: CGPoint(x: 206.13, y: 28.08))
        bezier4Path.addCurve(to: CGPoint(x: 234.71, y: 54.71), controlPoint1: CGPoint(x: 221.58, y: 35.66), controlPoint2: CGPoint(x: 229.01, y: 43.08))
        bezier4Path.addCurve(to: CGPoint(x: 240.33, y: 132.33), controlPoint1: CGPoint(x: 240.41, y: 66.41), controlPoint2: CGPoint(x: 240.33, y: 65.28))
        bezier4Path.addCurve(to: CGPoint(x: 234.71, y: 209.96), controlPoint1: CGPoint(x: 240.33, y: 199.38), controlPoint2: CGPoint(x: 240.41, y: 198.26))
        bezier4Path.addCurve(to: CGPoint(x: 209.96, y: 234.71), controlPoint1: CGPoint(x: 229.01, y: 221.58), controlPoint2: CGPoint(x: 221.58, y: 229.01))
        bezier4Path.addCurve(to: CGPoint(x: 132.33, y: 240.33), controlPoint1: CGPoint(x: 198.26, y: 240.41), controlPoint2: CGPoint(x: 199.38, y: 240.33))
        bezier4Path.addCurve(to: CGPoint(x: 54.71, y: 234.71), controlPoint1: CGPoint(x: 65.28, y: 240.33), controlPoint2: CGPoint(x: 66.41, y: 240.41))
        bezier4Path.addCurve(to: CGPoint(x: 29.96, y: 209.96), controlPoint1: CGPoint(x: 43.08, y: 229.01), controlPoint2: CGPoint(x: 35.66, y: 221.58))
        bezier4Path.addCurve(to: CGPoint(x: 24.33, y: 132.33), controlPoint1: CGPoint(x: 24.26, y: 198.26), controlPoint2: CGPoint(x: 24.33, y: 199.38))
        bezier4Path.addCurve(to: CGPoint(x: 29.96, y: 54.71), controlPoint1: CGPoint(x: 24.33, y: 65.28), controlPoint2: CGPoint(x: 24.26, y: 66.41))
        bezier4Path.addCurve(to: CGPoint(x: 54.71, y: 29.96), controlPoint1: CGPoint(x: 35.66, y: 43.08), controlPoint2: CGPoint(x: 43.01, y: 35.66))
        bezier4Path.addCurve(to: CGPoint(x: 131.81, y: 24.41), controlPoint1: CGPoint(x: 66.26, y: 24.33), controlPoint2: CGPoint(x: 64.46, y: 24.48))
        bezier4Path.addCurve(to: CGPoint(x: 197.43, y: 25.53), controlPoint1: CGPoint(x: 183.26, y: 24.33), controlPoint2: CGPoint(x: 192.48, y: 24.48))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 198.41, y: 51.86))
        bezier4Path.addCurve(to: CGPoint(x: 196.91, y: 70.31), controlPoint1: CGPoint(x: 191.21, y: 55.61), controlPoint2: CGPoint(x: 190.46, y: 65.51))
        bezier4Path.addCurve(to: CGPoint(x: 208.01, y: 71.06), controlPoint1: CGPoint(x: 199.76, y: 72.41), controlPoint2: CGPoint(x: 204.86, y: 72.71))
        bezier4Path.addCurve(to: CGPoint(x: 209.51, y: 52.61), controlPoint1: CGPoint(x: 215.21, y: 67.31), controlPoint2: CGPoint(x: 215.96, y: 57.41))
        bezier4Path.addCurve(to: CGPoint(x: 198.41, y: 51.86), controlPoint1: CGPoint(x: 206.66, y: 50.51), controlPoint2: CGPoint(x: 201.56, y: 50.21))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 118.31, y: 61.83))
        bezier4Path.addCurve(to: CGPoint(x: 62.43, y: 115.53), controlPoint1: CGPoint(x: 90.33, y: 67.91), controlPoint2: CGPoint(x: 69.33, y: 88.16))
        bezier4Path.addCurve(to: CGPoint(x: 60.78, y: 132.33), controlPoint1: CGPoint(x: 61.08, y: 120.78), controlPoint2: CGPoint(x: 60.78, y: 124.31))
        bezier4Path.addCurve(to: CGPoint(x: 67.01, y: 162.03), controlPoint1: CGPoint(x: 60.78, y: 144.33), controlPoint2: CGPoint(x: 62.43, y: 152.21))
        bezier4Path.addCurve(to: CGPoint(x: 101.21, y: 196.91), controlPoint1: CGPoint(x: 74.66, y: 178.23), controlPoint2: CGPoint(x: 85.31, y: 189.11))
        bezier4Path.addCurve(to: CGPoint(x: 132.33, y: 203.88), controlPoint1: CGPoint(x: 112.01, y: 202.16), controlPoint2: CGPoint(x: 119.81, y: 203.88))
        bezier4Path.addCurve(to: CGPoint(x: 163.46, y: 196.91), controlPoint1: CGPoint(x: 144.86, y: 203.88), controlPoint2: CGPoint(x: 152.66, y: 202.16))
        bezier4Path.addCurve(to: CGPoint(x: 197.66, y: 162.03), controlPoint1: CGPoint(x: 179.36, y: 189.11), controlPoint2: CGPoint(x: 190.01, y: 178.23))
        bezier4Path.addCurve(to: CGPoint(x: 203.88, y: 132.33), controlPoint1: CGPoint(x: 202.23, y: 152.21), controlPoint2: CGPoint(x: 203.88, y: 144.33))
        bezier4Path.addCurve(to: CGPoint(x: 196.91, y: 101.21), controlPoint1: CGPoint(x: 203.88, y: 119.81), controlPoint2: CGPoint(x: 202.16, y: 112.01))
        bezier4Path.addCurve(to: CGPoint(x: 162.03, y: 67.01), controlPoint1: CGPoint(x: 189.11, y: 85.31), controlPoint2: CGPoint(x: 178.23, y: 74.66))
        bezier4Path.addCurve(to: CGPoint(x: 118.31, y: 61.83), controlPoint1: CGPoint(x: 148.91, y: 60.86), controlPoint2: CGPoint(x: 131.96, y: 58.91))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 142.46, y: 85.46))
        bezier4Path.addCurve(to: CGPoint(x: 179.21, y: 122.21), controlPoint1: CGPoint(x: 160.31, y: 89.21), controlPoint2: CGPoint(x: 175.46, y: 104.36))
        bezier4Path.addCurve(to: CGPoint(x: 122.21, y: 179.21), controlPoint1: CGPoint(x: 186.33, y: 156.26), controlPoint2: CGPoint(x: 156.26, y: 186.33))
        bezier4Path.addCurve(to: CGPoint(x: 89.66, y: 154.08), controlPoint1: CGPoint(x: 108.56, y: 176.36), controlPoint2: CGPoint(x: 95.81, y: 166.46))
        bezier4Path.addCurve(to: CGPoint(x: 89.66, y: 110.58), controlPoint1: CGPoint(x: 82.61, y: 139.68), controlPoint2: CGPoint(x: 82.61, y: 124.98))
        bezier4Path.addCurve(to: CGPoint(x: 142.46, y: 85.46), controlPoint1: CGPoint(x: 99.11, y: 91.46), controlPoint2: CGPoint(x: 121.08, y: 80.96))
        bezier4Path.close()
        main.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawVK(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 384), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 384, height: 384), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 384, y: resizedFrame.height / 384)


        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 161.21, y: 83.28))
        bezierPath.addCurve(to: CGPoint(x: 140.96, y: 86.36), controlPoint1: CGPoint(x: 153.93, y: 83.81), controlPoint2: CGPoint(x: 144.63, y: 85.23))
        bezierPath.addCurve(to: CGPoint(x: 128.13, y: 97.76), controlPoint1: CGPoint(x: 134.58, y: 88.31), controlPoint2: CGPoint(x: 126.71, y: 95.36))
        bezierPath.addCurve(to: CGPoint(x: 131.43, y: 99.03), controlPoint1: CGPoint(x: 128.43, y: 98.13), controlPoint2: CGPoint(x: 129.86, y: 98.73))
        bezierPath.addCurve(to: CGPoint(x: 146.73, y: 109.31), controlPoint1: CGPoint(x: 138.33, y: 100.31), controlPoint2: CGPoint(x: 144.11, y: 104.21))
        bezierPath.addCurve(to: CGPoint(x: 150.78, y: 164.58), controlPoint1: CGPoint(x: 151.16, y: 118.01), controlPoint2: CGPoint(x: 153.18, y: 145.31))
        bezierPath.addCurve(to: CGPoint(x: 146.13, y: 184.91), controlPoint1: CGPoint(x: 149.21, y: 177.33), controlPoint2: CGPoint(x: 148.53, y: 180.26))
        bezierPath.addCurve(to: CGPoint(x: 109.53, y: 159.41), controlPoint1: CGPoint(x: 139.91, y: 197.36), controlPoint2: CGPoint(x: 125.43, y: 187.31))
        bezierPath.addCurve(to: CGPoint(x: 84.41, y: 109.23), controlPoint1: CGPoint(x: 103.83, y: 149.51), controlPoint2: CGPoint(x: 87.93, y: 117.71))
        bezierPath.addCurve(to: CGPoint(x: 73.83, y: 94.61), controlPoint1: CGPoint(x: 80.06, y: 98.96), controlPoint2: CGPoint(x: 78.71, y: 97.08))
        bezierPath.addLine(to: CGPoint(x: 69.71, y: 92.51))
        bezierPath.addLine(to: CGPoint(x: 38.58, y: 92.73))
        bezierPath.addCurve(to: CGPoint(x: 5.06, y: 94.31), controlPoint1: CGPoint(x: 10.46, y: 92.96), controlPoint2: CGPoint(x: 7.23, y: 93.11))
        bezierPath.addCurve(to: CGPoint(x: 0.56, y: 102.18), controlPoint1: CGPoint(x: 1.53, y: 96.18), controlPoint2: CGPoint(x: 0.03, y: 98.81))
        bezierPath.addCurve(to: CGPoint(x: 21.48, y: 148.83), controlPoint1: CGPoint(x: 1.01, y: 105.78), controlPoint2: CGPoint(x: 12.78, y: 132.03))
        bezierPath.addCurve(to: CGPoint(x: 68.13, y: 226.08), controlPoint1: CGPoint(x: 38.43, y: 181.53), controlPoint2: CGPoint(x: 52.83, y: 205.31))
        bezierPath.addCurve(to: CGPoint(x: 123.71, y: 281.21), controlPoint1: CGPoint(x: 90.71, y: 256.61), controlPoint2: CGPoint(x: 100.68, y: 266.51))
        bezierPath.addCurve(to: CGPoint(x: 151.83, y: 295.16), controlPoint1: CGPoint(x: 134.43, y: 288.11), controlPoint2: CGPoint(x: 142.23, y: 291.93))
        bezierPath.addCurve(to: CGPoint(x: 190.46, y: 300.86), controlPoint1: CGPoint(x: 165.03, y: 299.58), controlPoint2: CGPoint(x: 170.73, y: 300.41))
        bezierPath.addCurve(to: CGPoint(x: 219.86, y: 297.86), controlPoint1: CGPoint(x: 210.03, y: 301.31), controlPoint2: CGPoint(x: 215.66, y: 300.71))
        bezierPath.addCurve(to: CGPoint(x: 224.96, y: 282.33), controlPoint1: CGPoint(x: 223.23, y: 295.53), controlPoint2: CGPoint(x: 224.28, y: 292.31))
        bezierPath.addCurve(to: CGPoint(x: 230.13, y: 259.46), controlPoint1: CGPoint(x: 225.56, y: 272.43), controlPoint2: CGPoint(x: 227.51, y: 263.96))
        bezierPath.addCurve(to: CGPoint(x: 239.81, y: 250.76), controlPoint1: CGPoint(x: 232.53, y: 255.48), controlPoint2: CGPoint(x: 237.56, y: 250.83))
        bezierPath.addCurve(to: CGPoint(x: 267.56, y: 271.38), controlPoint1: CGPoint(x: 247.38, y: 250.38), controlPoint2: CGPoint(x: 251.66, y: 253.53))
        bezierPath.addCurve(to: CGPoint(x: 296.21, y: 296.96), controlPoint1: CGPoint(x: 282.48, y: 288.11), controlPoint2: CGPoint(x: 287.96, y: 292.98))
        bezierPath.addCurve(to: CGPoint(x: 306.33, y: 300.93), controlPoint1: CGPoint(x: 299.96, y: 298.68), controlPoint2: CGPoint(x: 304.46, y: 300.48))
        bezierPath.addCurve(to: CGPoint(x: 375.48, y: 299.66), controlPoint1: CGPoint(x: 310.83, y: 301.98), controlPoint2: CGPoint(x: 371.58, y: 300.78))
        bezierPath.addCurve(to: CGPoint(x: 383.66, y: 291.63), controlPoint1: CGPoint(x: 379.38, y: 298.46), controlPoint2: CGPoint(x: 383.58, y: 294.33))
        bezierPath.addCurve(to: CGPoint(x: 377.66, y: 272.96), controlPoint1: CGPoint(x: 383.96, y: 284.21), controlPoint2: CGPoint(x: 382.83, y: 280.83))
        bezierPath.addCurve(to: CGPoint(x: 344.88, y: 236.21), controlPoint1: CGPoint(x: 370.76, y: 262.61), controlPoint2: CGPoint(x: 364.91, y: 256.01))
        bezierPath.addCurve(to: CGPoint(x: 322.08, y: 206.13), controlPoint1: CGPoint(x: 323.58, y: 215.13), controlPoint2: CGPoint(x: 322.16, y: 213.18))
        bezierPath.addCurve(to: CGPoint(x: 343.53, y: 170.96), controlPoint1: CGPoint(x: 322.08, y: 200.21), controlPoint2: CGPoint(x: 324.86, y: 195.71))
        bezierPath.addCurve(to: CGPoint(x: 383.28, y: 107.36), controlPoint1: CGPoint(x: 369.86, y: 136.08), controlPoint2: CGPoint(x: 380.36, y: 119.21))
        bezierPath.addCurve(to: CGPoint(x: 379.61, y: 94.61), controlPoint1: CGPoint(x: 385.01, y: 100.38), controlPoint2: CGPoint(x: 384.03, y: 97.01))
        bezierPath.addLine(to: CGPoint(x: 376.46, y: 92.96))
        bezierPath.addLine(to: CGPoint(x: 338.58, y: 93.18))
        bezierPath.addCurve(to: CGPoint(x: 298.83, y: 94.31), controlPoint1: CGPoint(x: 311.81, y: 93.41), controlPoint2: CGPoint(x: 300.18, y: 93.71))
        bezierPath.addCurve(to: CGPoint(x: 290.28, y: 108.33), controlPoint1: CGPoint(x: 296.28, y: 95.51), controlPoint2: CGPoint(x: 293.66, y: 99.93))
        bezierPath.addCurve(to: CGPoint(x: 250.53, y: 177.63), controlPoint1: CGPoint(x: 281.28, y: 130.76), controlPoint2: CGPoint(x: 262.76, y: 163.08))
        bezierPath.addCurve(to: CGPoint(x: 235.61, y: 189.33), controlPoint1: CGPoint(x: 245.66, y: 183.41), controlPoint2: CGPoint(x: 238.08, y: 189.33))
        bezierPath.addCurve(to: CGPoint(x: 226.98, y: 182.58), controlPoint1: CGPoint(x: 232.08, y: 189.33), controlPoint2: CGPoint(x: 229.16, y: 187.08))
        bezierPath.addLine(to: CGPoint(x: 224.96, y: 178.46))
        bezierPath.addLine(to: CGPoint(x: 225.18, y: 139.53))
        bezierPath.addCurve(to: CGPoint(x: 221.43, y: 90.86), controlPoint1: CGPoint(x: 225.41, y: 97.61), controlPoint2: CGPoint(x: 225.26, y: 96.41))
        bezierPath.addCurve(to: CGPoint(x: 183.33, y: 83.21), controlPoint1: CGPoint(x: 217.61, y: 85.46), controlPoint2: CGPoint(x: 208.31, y: 83.58))
        bezierPath.addCurve(to: CGPoint(x: 161.21, y: 83.28), controlPoint1: CGPoint(x: 173.21, y: 83.13), controlPoint2: CGPoint(x: 163.31, y: 83.13))
        bezierPath.close()
        main.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawGoogle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 688, height: 688), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 688, height: 688), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 688, y: resizedFrame.height / 688)


        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 329.54, y: 1.24))
        bezierPath.addCurve(to: CGPoint(x: 223.42, y: 24.94), controlPoint1: CGPoint(x: 294.22, y: 3.34), controlPoint2: CGPoint(x: 257.24, y: 11.59))
        bezierPath.addCurve(to: CGPoint(x: 173.17, y: 49.92), controlPoint1: CGPoint(x: 211.12, y: 29.74), controlPoint2: CGPoint(x: 185.02, y: 42.72))
        bezierPath.addCurve(to: CGPoint(x: 69.07, y: 147.42), controlPoint1: CGPoint(x: 133.42, y: 73.92), controlPoint2: CGPoint(x: 96.37, y: 108.64))
        bezierPath.addCurve(to: CGPoint(x: 32.24, y: 215.67), controlPoint1: CGPoint(x: 55.87, y: 166.17), controlPoint2: CGPoint(x: 40.72, y: 194.29))
        bezierPath.addCurve(to: CGPoint(x: 31.94, y: 472.92), controlPoint1: CGPoint(x: -0.53, y: 298.39), controlPoint2: CGPoint(x: -0.68, y: 390.04))
        bezierPath.addCurve(to: CGPoint(x: 56.92, y: 523.17), controlPoint1: CGPoint(x: 36.74, y: 485.22), controlPoint2: CGPoint(x: 49.72, y: 511.32))
        bezierPath.addCurve(to: CGPoint(x: 153.37, y: 626.52), controlPoint1: CGPoint(x: 81.14, y: 563.14), controlPoint2: CGPoint(x: 114.44, y: 598.84))
        bezierPath.addCurve(to: CGPoint(x: 223.42, y: 664.39), controlPoint1: CGPoint(x: 171.59, y: 639.49), controlPoint2: CGPoint(x: 202.42, y: 656.14))
        bezierPath.addCurve(to: CGPoint(x: 537.82, y: 633.42), controlPoint1: CGPoint(x: 328.34, y: 705.64), controlPoint2: CGPoint(x: 447.67, y: 693.87))
        bezierPath.addCurve(to: CGPoint(x: 622.72, y: 547.92), controlPoint1: CGPoint(x: 571.57, y: 610.69), controlPoint2: CGPoint(x: 600.14, y: 581.97))
        bezierPath.addCurve(to: CGPoint(x: 643.49, y: 511.92), controlPoint1: CGPoint(x: 631.94, y: 533.97), controlPoint2: CGPoint(x: 635.84, y: 527.29))
        bezierPath.addCurve(to: CGPoint(x: 679.94, y: 355.92), controlPoint1: CGPoint(x: 666.14, y: 466.39), controlPoint2: CGPoint(x: 678.37, y: 414.04))
        bezierPath.addCurve(to: CGPoint(x: 674.39, y: 291.94), controlPoint1: CGPoint(x: 680.54, y: 332.74), controlPoint2: CGPoint(x: 679.12, y: 316.17))
        bezierPath.addLine(to: CGPoint(x: 672.44, y: 281.67))
        bezierPath.addLine(to: CGPoint(x: 512.02, y: 281.67))
        bezierPath.addLine(to: CGPoint(x: 351.67, y: 281.67))
        bezierPath.addLine(to: CGPoint(x: 351.67, y: 348.42))
        bezierPath.addLine(to: CGPoint(x: 351.67, y: 415.17))
        bezierPath.addLine(to: CGPoint(x: 443.54, y: 415.17))
        bezierPath.addLine(to: CGPoint(x: 535.49, y: 415.17))
        bezierPath.addLine(to: CGPoint(x: 534.97, y: 417.94))
        bezierPath.addCurve(to: CGPoint(x: 527.09, y: 443.44), controlPoint1: CGPoint(x: 534.22, y: 422.37), controlPoint2: CGPoint(x: 529.72, y: 436.92))
        bezierPath.addCurve(to: CGPoint(x: 404.54, y: 541.92), controlPoint1: CGPoint(x: 507.14, y: 493.84), controlPoint2: CGPoint(x: 463.04, y: 529.24))
        bezierPath.addCurve(to: CGPoint(x: 332.54, y: 546.49), controlPoint1: CGPoint(x: 383.39, y: 546.49), controlPoint2: CGPoint(x: 352.04, y: 548.44))
        bezierPath.addCurve(to: CGPoint(x: 170.09, y: 434.67), controlPoint1: CGPoint(x: 261.59, y: 539.29), controlPoint2: CGPoint(x: 201.59, y: 497.97))
        bezierPath.addCurve(to: CGPoint(x: 149.17, y: 344.67), controlPoint1: CGPoint(x: 155.99, y: 406.32), controlPoint2: CGPoint(x: 149.17, y: 376.92))
        bezierPath.addCurve(to: CGPoint(x: 208.42, y: 201.42), controlPoint1: CGPoint(x: 149.17, y: 290.07), controlPoint2: CGPoint(x: 169.94, y: 239.89))
        bezierPath.addCurve(to: CGPoint(x: 329.17, y: 143.22), controlPoint1: CGPoint(x: 241.34, y: 168.49), controlPoint2: CGPoint(x: 282.52, y: 148.62))
        bezierPath.addCurve(to: CGPoint(x: 380.39, y: 143.97), controlPoint1: CGPoint(x: 342.37, y: 141.72), controlPoint2: CGPoint(x: 368.77, y: 142.09))
        bezierPath.addCurve(to: CGPoint(x: 465.44, y: 178.02), controlPoint1: CGPoint(x: 412.49, y: 149.22), controlPoint2: CGPoint(x: 440.39, y: 160.32))
        bezierPath.addCurve(to: CGPoint(x: 476.39, y: 185.89), controlPoint1: CGPoint(x: 470.32, y: 181.39), controlPoint2: CGPoint(x: 475.27, y: 184.99))
        bezierPath.addLine(to: CGPoint(x: 478.49, y: 187.47))
        bezierPath.addLine(to: CGPoint(x: 528.74, y: 137.29))
        bezierPath.addLine(to: CGPoint(x: 578.99, y: 87.04))
        bezierPath.addLine(to: CGPoint(x: 575.39, y: 83.82))
        bezierPath.addCurve(to: CGPoint(x: 562.94, y: 73.69), controlPoint1: CGPoint(x: 573.44, y: 82.02), controlPoint2: CGPoint(x: 567.82, y: 77.44))
        bezierPath.addCurve(to: CGPoint(x: 329.54, y: 1.24), controlPoint1: CGPoint(x: 495.29, y: 21.19), controlPoint2: CGPoint(x: 414.74, y: -3.86))
        bezierPath.close()
        main.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawFacebook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 400), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 400, height: 400), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 400, y: resizedFrame.height / 400)


        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 215.71, y: 1.9))
        bezierPath.addCurve(to: CGPoint(x: 168.28, y: 22.03), controlPoint1: CGPoint(x: 196.02, y: 4.22), controlPoint2: CGPoint(x: 179.15, y: 11.38))
        bezierPath.addCurve(to: CGPoint(x: 157.23, y: 37.71), controlPoint1: CGPoint(x: 162.95, y: 27.26), controlPoint2: CGPoint(x: 160.72, y: 30.55))
        bezierPath.addCurve(to: CGPoint(x: 149.08, y: 95.88), controlPoint1: CGPoint(x: 149.86, y: 52.91), controlPoint2: CGPoint(x: 149.56, y: 55.42))
        bezierPath.addLine(to: CGPoint(x: 148.59, y: 131.5))
        bezierPath.addLine(to: CGPoint(x: 127.84, y: 131.5))
        bezierPath.addLine(to: CGPoint(x: 107.08, y: 131.5))
        bezierPath.addLine(to: CGPoint(x: 107.08, y: 165.86))
        bezierPath.addLine(to: CGPoint(x: 107.08, y: 200.22))
        bezierPath.addLine(to: CGPoint(x: 127.94, y: 200.22))
        bezierPath.addLine(to: CGPoint(x: 148.79, y: 200.22))
        bezierPath.addLine(to: CGPoint(x: 148.79, y: 300.4))
        bezierPath.addLine(to: CGPoint(x: 148.79, y: 400.58))
        bezierPath.addLine(to: CGPoint(x: 189.52, y: 400.58))
        bezierPath.addLine(to: CGPoint(x: 230.26, y: 400.58))
        bezierPath.addLine(to: CGPoint(x: 230.26, y: 299.92))
        bezierPath.addLine(to: CGPoint(x: 230.26, y: 199.26))
        bezierPath.addLine(to: CGPoint(x: 258.39, y: 199.26))
        bezierPath.addCurve(to: CGPoint(x: 286.51, y: 198.77), controlPoint1: CGPoint(x: 273.91, y: 199.26), controlPoint2: CGPoint(x: 286.51, y: 199.06))
        bezierPath.addCurve(to: CGPoint(x: 289.42, y: 165.67), controlPoint1: CGPoint(x: 286.51, y: 198.48), controlPoint2: CGPoint(x: 287.87, y: 183.67))
        bezierPath.addCurve(to: CGPoint(x: 292.33, y: 132.28), controlPoint1: CGPoint(x: 291.07, y: 147.76), controlPoint2: CGPoint(x: 292.33, y: 132.76))
        bezierPath.addCurve(to: CGPoint(x: 261.3, y: 131.5), controlPoint1: CGPoint(x: 292.33, y: 131.89), controlPoint2: CGPoint(x: 278.37, y: 131.5))
        bezierPath.addLine(to: CGPoint(x: 230.26, y: 131.5))
        bezierPath.addLine(to: CGPoint(x: 230.26, y: 109.14))
        bezierPath.addCurve(to: CGPoint(x: 231.33, y: 82.62), controlPoint1: CGPoint(x: 230.26, y: 96.27), controlPoint2: CGPoint(x: 230.74, y: 85.14))
        bezierPath.addCurve(to: CGPoint(x: 241.51, y: 72.36), controlPoint1: CGPoint(x: 232.59, y: 77.49), controlPoint2: CGPoint(x: 236.56, y: 73.52))
        bezierPath.addCurve(to: CGPoint(x: 268.86, y: 71.49), controlPoint1: CGPoint(x: 243.64, y: 71.98), controlPoint2: CGPoint(x: 255.87, y: 71.49))
        bezierPath.addLine(to: CGPoint(x: 292.33, y: 71.49))
        bezierPath.addLine(to: CGPoint(x: 292.33, y: 36.16))
        bezierPath.addLine(to: CGPoint(x: 292.33, y: 0.83))
        bezierPath.addLine(to: CGPoint(x: 257.71, y: 0.93))
        bezierPath.addCurve(to: CGPoint(x: 215.71, y: 1.9), controlPoint1: CGPoint(x: 238.6, y: 1.03), controlPoint2: CGPoint(x: 219.69, y: 1.41))
        bezierPath.close()
        main.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
