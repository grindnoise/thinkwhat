//
//  SocialLogosStyleKit.swift
//  SpamGuard
//
//  Created by pavel on 25.12.2018.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//  



import UIKit

@IBDesignable
class SafariLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawSafari(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class GoogleLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawGoogle(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class InstagramLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawInstagram(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class VKLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawVK(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class FacebookLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawFacebook(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class YoutubeLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawYoutube(frame: rect, resizing: .aspectFit)
    }
}

@IBDesignable
class WikiLogo: UIView {
    override func draw(_ rect: CGRect) {
        SocialLogosStyleKit.drawWiki(frame: rect, resizing: .aspectFit)
    }
}

public class SocialLogosStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc public dynamic class func drawInstagram(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)
        
        
        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)
        
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 255.86, y: 120.41))
        bezier4Path.addCurve(to: CGPoint(x: 118.87, y: 258.39), controlPoint1: CGPoint(x: 185.68, y: 132.28), controlPoint2: CGPoint(x: 130.27, y: 187.95))
        bezier4Path.addCurve(to: CGPoint(x: 118.87, y: 542.37), controlPoint1: CGPoint(x: 115.34, y: 279.73), controlPoint2: CGPoint(x: 115.34, y: 521.03))
        bezier4Path.addCurve(to: CGPoint(x: 256.98, y: 680.35), controlPoint1: CGPoint(x: 130.43, y: 613.45), controlPoint2: CGPoint(x: 185.84, y: 668.8))
        bezier4Path.addCurve(to: CGPoint(x: 541.24, y: 680.35), controlPoint1: CGPoint(x: 278.34, y: 683.88), controlPoint2: CGPoint(x: 519.88, y: 683.88))
        bezier4Path.addCurve(to: CGPoint(x: 679.35, y: 542.37), controlPoint1: CGPoint(x: 612.38, y: 668.8), controlPoint2: CGPoint(x: 667.79, y: 613.45))
        bezier4Path.addCurve(to: CGPoint(x: 679.35, y: 258.39), controlPoint1: CGPoint(x: 682.88, y: 521.03), controlPoint2: CGPoint(x: 682.88, y: 279.73))
        bezier4Path.addCurve(to: CGPoint(x: 541.24, y: 120.41), controlPoint1: CGPoint(x: 667.79, y: 187.31), controlPoint2: CGPoint(x: 612.38, y: 131.96))
        bezier4Path.addCurve(to: CGPoint(x: 255.86, y: 120.41), controlPoint1: CGPoint(x: 521.48, y: 117.2), controlPoint2: CGPoint(x: 275.13, y: 117.2))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 538.51, y: 171.91))
        bezier4Path.addCurve(to: CGPoint(x: 565.33, y: 181.37), controlPoint1: CGPoint(x: 545.57, y: 173.19), controlPoint2: CGPoint(x: 557.14, y: 177.36))
        bezier4Path.addCurve(to: CGPoint(x: 618.32, y: 234.32), controlPoint1: CGPoint(x: 590.22, y: 193.57), controlPoint2: CGPoint(x: 606.12, y: 209.45))
        bezier4Path.addCurve(to: CGPoint(x: 630.37, y: 400.38), controlPoint1: CGPoint(x: 630.53, y: 259.35), controlPoint2: CGPoint(x: 630.37, y: 256.94))
        bezier4Path.addCurve(to: CGPoint(x: 618.32, y: 566.44), controlPoint1: CGPoint(x: 630.37, y: 543.82), controlPoint2: CGPoint(x: 630.53, y: 541.41))
        bezier4Path.addCurve(to: CGPoint(x: 565.33, y: 619.38), controlPoint1: CGPoint(x: 606.12, y: 591.31), controlPoint2: CGPoint(x: 590.22, y: 607.19))
        bezier4Path.addCurve(to: CGPoint(x: 399.11, y: 631.42), controlPoint1: CGPoint(x: 540.27, y: 631.58), controlPoint2: CGPoint(x: 542.68, y: 631.42))
        bezier4Path.addCurve(to: CGPoint(x: 232.89, y: 619.38), controlPoint1: CGPoint(x: 255.54, y: 631.42), controlPoint2: CGPoint(x: 257.95, y: 631.58))
        bezier4Path.addCurve(to: CGPoint(x: 179.9, y: 566.44), controlPoint1: CGPoint(x: 208, y: 607.19), controlPoint2: CGPoint(x: 192.1, y: 591.31))
        bezier4Path.addCurve(to: CGPoint(x: 167.85, y: 400.38), controlPoint1: CGPoint(x: 167.69, y: 541.41), controlPoint2: CGPoint(x: 167.85, y: 543.82))
        bezier4Path.addCurve(to: CGPoint(x: 179.9, y: 234.32), controlPoint1: CGPoint(x: 167.85, y: 256.94), controlPoint2: CGPoint(x: 167.69, y: 259.35))
        bezier4Path.addCurve(to: CGPoint(x: 232.89, y: 181.37), controlPoint1: CGPoint(x: 192.1, y: 209.45), controlPoint2: CGPoint(x: 207.84, y: 193.57))
        bezier4Path.addCurve(to: CGPoint(x: 397.99, y: 169.5), controlPoint1: CGPoint(x: 257.63, y: 169.34), controlPoint2: CGPoint(x: 253.77, y: 169.66))
        bezier4Path.addCurve(to: CGPoint(x: 538.51, y: 171.91), controlPoint1: CGPoint(x: 508.15, y: 169.34), controlPoint2: CGPoint(x: 527.91, y: 169.66))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 540.6, y: 228.22))
        bezier4Path.addCurve(to: CGPoint(x: 537.38, y: 267.69), controlPoint1: CGPoint(x: 525.18, y: 236.25), controlPoint2: CGPoint(x: 523.57, y: 257.42))
        bezier4Path.addCurve(to: CGPoint(x: 561.15, y: 269.3), controlPoint1: CGPoint(x: 543.49, y: 272.19), controlPoint2: CGPoint(x: 554.41, y: 272.83))
        bezier4Path.addCurve(to: CGPoint(x: 564.36, y: 229.83), controlPoint1: CGPoint(x: 576.57, y: 261.28), controlPoint2: CGPoint(x: 578.17, y: 240.1))
        bezier4Path.addCurve(to: CGPoint(x: 540.6, y: 228.22), controlPoint1: CGPoint(x: 558.26, y: 225.34), controlPoint2: CGPoint(x: 547.34, y: 224.69))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 369.08, y: 249.56))
        bezier4Path.addCurve(to: CGPoint(x: 249.44, y: 364.44), controlPoint1: CGPoint(x: 309.18, y: 262.56), controlPoint2: CGPoint(x: 264.21, y: 305.88))
        bezier4Path.addCurve(to: CGPoint(x: 245.9, y: 400.38), controlPoint1: CGPoint(x: 246.54, y: 375.67), controlPoint2: CGPoint(x: 245.9, y: 383.21))
        bezier4Path.addCurve(to: CGPoint(x: 259.23, y: 463.92), controlPoint1: CGPoint(x: 245.9, y: 426.05), controlPoint2: CGPoint(x: 249.44, y: 442.9))
        bezier4Path.addCurve(to: CGPoint(x: 332.46, y: 538.52), controlPoint1: CGPoint(x: 275.61, y: 498.57), controlPoint2: CGPoint(x: 298.42, y: 521.84))
        bezier4Path.addCurve(to: CGPoint(x: 399.11, y: 553.44), controlPoint1: CGPoint(x: 355.59, y: 549.75), controlPoint2: CGPoint(x: 372.29, y: 553.44))
        bezier4Path.addCurve(to: CGPoint(x: 465.76, y: 538.52), controlPoint1: CGPoint(x: 425.93, y: 553.44), controlPoint2: CGPoint(x: 442.63, y: 549.75))
        bezier4Path.addCurve(to: CGPoint(x: 538.99, y: 463.92), controlPoint1: CGPoint(x: 499.8, y: 521.84), controlPoint2: CGPoint(x: 522.61, y: 498.57))
        bezier4Path.addCurve(to: CGPoint(x: 552.32, y: 400.38), controlPoint1: CGPoint(x: 548.79, y: 442.9), controlPoint2: CGPoint(x: 552.32, y: 426.05))
        bezier4Path.addCurve(to: CGPoint(x: 537.38, y: 333.8), controlPoint1: CGPoint(x: 552.32, y: 373.59), controlPoint2: CGPoint(x: 548.63, y: 356.9))
        bezier4Path.addCurve(to: CGPoint(x: 462.71, y: 260.63), controlPoint1: CGPoint(x: 520.68, y: 299.78), controlPoint2: CGPoint(x: 497.4, y: 277))
        bezier4Path.addCurve(to: CGPoint(x: 369.08, y: 249.56), controlPoint1: CGPoint(x: 434.6, y: 247.48), controlPoint2: CGPoint(x: 398.31, y: 243.31))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 420.79, y: 300.1))
        bezier4Path.addCurve(to: CGPoint(x: 499.48, y: 378.72), controlPoint1: CGPoint(x: 459.01, y: 308.12), controlPoint2: CGPoint(x: 491.45, y: 340.53))
        bezier4Path.addCurve(to: CGPoint(x: 377.43, y: 500.66), controlPoint1: CGPoint(x: 514.74, y: 451.56), controlPoint2: CGPoint(x: 450.34, y: 515.9))
        bezier4Path.addCurve(to: CGPoint(x: 307.73, y: 446.91), controlPoint1: CGPoint(x: 348.2, y: 494.56), controlPoint2: CGPoint(x: 320.9, y: 473.38))
        bezier4Path.addCurve(to: CGPoint(x: 307.73, y: 353.85), controlPoint1: CGPoint(x: 292.64, y: 416.1), controlPoint2: CGPoint(x: 292.64, y: 384.66))
        bezier4Path.addCurve(to: CGPoint(x: 420.79, y: 300.1), controlPoint1: CGPoint(x: 327.97, y: 312.94), controlPoint2: CGPoint(x: 375.02, y: 290.48))
        bezier4Path.close()
        main.setFill()
        bezier4Path.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawVK(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)
        
        
        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 334.52, y: 173.42))
        bezierPath.addCurve(to: CGPoint(x: 292.32, y: 179.83), controlPoint1: CGPoint(x: 319.36, y: 174.51), controlPoint2: CGPoint(x: 299.98, y: 177.49))
        bezierPath.addCurve(to: CGPoint(x: 265.58, y: 203.62), controlPoint1: CGPoint(x: 279.03, y: 183.9), controlPoint2: CGPoint(x: 262.61, y: 198.61))
        bezierPath.addCurve(to: CGPoint(x: 272.46, y: 206.28), controlPoint1: CGPoint(x: 266.21, y: 204.4), controlPoint2: CGPoint(x: 269.18, y: 205.65))
        bezierPath.addCurve(to: CGPoint(x: 304.35, y: 227.71), controlPoint1: CGPoint(x: 286.84, y: 208.94), controlPoint2: CGPoint(x: 298.88, y: 217.07))
        bezierPath.addCurve(to: CGPoint(x: 312.79, y: 343.03), controlPoint1: CGPoint(x: 313.58, y: 245.86), controlPoint2: CGPoint(x: 317.8, y: 302.82))
        bezierPath.addCurve(to: CGPoint(x: 303.1, y: 385.44), controlPoint1: CGPoint(x: 309.51, y: 369.63), controlPoint2: CGPoint(x: 308.1, y: 375.73))
        bezierPath.addCurve(to: CGPoint(x: 226.81, y: 332.24), controlPoint1: CGPoint(x: 290.13, y: 411.41), controlPoint2: CGPoint(x: 259.96, y: 390.44))
        bezierPath.addCurve(to: CGPoint(x: 174.44, y: 227.56), controlPoint1: CGPoint(x: 214.93, y: 311.58), controlPoint2: CGPoint(x: 181.79, y: 245.24))
        bezierPath.addCurve(to: CGPoint(x: 152.4, y: 197.05), controlPoint1: CGPoint(x: 165.38, y: 206.12), controlPoint2: CGPoint(x: 162.56, y: 202.21))
        bezierPath.addLine(to: CGPoint(x: 143.8, y: 192.66))
        bezierPath.addLine(to: CGPoint(x: 78.93, y: 193.13))
        bezierPath.addCurve(to: CGPoint(x: 9.05, y: 196.42), controlPoint1: CGPoint(x: 20.3, y: 193.6), controlPoint2: CGPoint(x: 13.58, y: 193.92))
        bezierPath.addCurve(to: CGPoint(x: -0.33, y: 212.85), controlPoint1: CGPoint(x: 1.7, y: 200.33), controlPoint2: CGPoint(x: -1.43, y: 205.81))
        bezierPath.addCurve(to: CGPoint(x: 43.28, y: 310.17), controlPoint1: CGPoint(x: 0.61, y: 220.36), controlPoint2: CGPoint(x: 25.15, y: 275.12))
        bezierPath.addCurve(to: CGPoint(x: 140.52, y: 471.34), controlPoint1: CGPoint(x: 78.61, y: 378.39), controlPoint2: CGPoint(x: 108.63, y: 428))
        bezierPath.addCurve(to: CGPoint(x: 256.36, y: 586.34), controlPoint1: CGPoint(x: 187.58, y: 535.02), controlPoint2: CGPoint(x: 208.37, y: 555.67))
        bezierPath.addCurve(to: CGPoint(x: 314.98, y: 615.45), controlPoint1: CGPoint(x: 278.71, y: 600.74), controlPoint2: CGPoint(x: 294.97, y: 608.72))
        bezierPath.addCurve(to: CGPoint(x: 395.49, y: 627.34), controlPoint1: CGPoint(x: 342.5, y: 624.68), controlPoint2: CGPoint(x: 354.38, y: 626.4))
        bezierPath.addCurve(to: CGPoint(x: 456.77, y: 621.08), controlPoint1: CGPoint(x: 436.29, y: 628.28), controlPoint2: CGPoint(x: 448.02, y: 627.02))
        bezierPath.addCurve(to: CGPoint(x: 467.4, y: 588.69), controlPoint1: CGPoint(x: 463.81, y: 616.23), controlPoint2: CGPoint(x: 466, y: 609.5))
        bezierPath.addCurve(to: CGPoint(x: 478.19, y: 540.97), controlPoint1: CGPoint(x: 468.65, y: 568.04), controlPoint2: CGPoint(x: 472.72, y: 550.35))
        bezierPath.addCurve(to: CGPoint(x: 498.36, y: 522.82), controlPoint1: CGPoint(x: 483.19, y: 532.67), controlPoint2: CGPoint(x: 493.67, y: 522.97))
        bezierPath.addCurve(to: CGPoint(x: 556.2, y: 565.85), controlPoint1: CGPoint(x: 514.15, y: 522.03), controlPoint2: CGPoint(x: 523.06, y: 528.61))
        bezierPath.addCurve(to: CGPoint(x: 615.91, y: 619.2), controlPoint1: CGPoint(x: 587.31, y: 600.74), controlPoint2: CGPoint(x: 598.72, y: 610.91))
        bezierPath.addCurve(to: CGPoint(x: 637.02, y: 627.49), controlPoint1: CGPoint(x: 623.73, y: 622.8), controlPoint2: CGPoint(x: 633.11, y: 626.56))
        bezierPath.addCurve(to: CGPoint(x: 781.15, y: 624.83), controlPoint1: CGPoint(x: 646.4, y: 629.68), controlPoint2: CGPoint(x: 773.02, y: 627.18))
        bezierPath.addCurve(to: CGPoint(x: 798.19, y: 608.09), controlPoint1: CGPoint(x: 789.28, y: 622.33), controlPoint2: CGPoint(x: 798.04, y: 613.72))
        bezierPath.addCurve(to: CGPoint(x: 785.69, y: 569.13), controlPoint1: CGPoint(x: 798.82, y: 592.6), controlPoint2: CGPoint(x: 796.47, y: 585.56))
        bezierPath.addCurve(to: CGPoint(x: 717.37, y: 492.46), controlPoint1: CGPoint(x: 771.31, y: 547.54), controlPoint2: CGPoint(x: 759.11, y: 533.77))
        bezierPath.addCurve(to: CGPoint(x: 669.85, y: 429.72), controlPoint1: CGPoint(x: 672.97, y: 448.49), controlPoint2: CGPoint(x: 670, y: 444.42))
        bezierPath.addCurve(to: CGPoint(x: 714.56, y: 356.33), controlPoint1: CGPoint(x: 669.85, y: 417.36), controlPoint2: CGPoint(x: 675.63, y: 407.97))
        bezierPath.addCurve(to: CGPoint(x: 797.41, y: 223.65), controlPoint1: CGPoint(x: 769.43, y: 283.57), controlPoint2: CGPoint(x: 791.32, y: 248.37))
        bezierPath.addCurve(to: CGPoint(x: 789.75, y: 197.05), controlPoint1: CGPoint(x: 801.01, y: 209.09), controlPoint2: CGPoint(x: 798.98, y: 202.05))
        bezierPath.addLine(to: CGPoint(x: 783.19, y: 193.6))
        bezierPath.addLine(to: CGPoint(x: 704.24, y: 194.07))
        bezierPath.addCurve(to: CGPoint(x: 621.39, y: 196.42), controlPoint1: CGPoint(x: 648.43, y: 194.54), controlPoint2: CGPoint(x: 624.2, y: 195.17))
        bezierPath.addCurve(to: CGPoint(x: 603.56, y: 225.68), controlPoint1: CGPoint(x: 616.07, y: 198.92), controlPoint2: CGPoint(x: 610.6, y: 208.15))
        bezierPath.addCurve(to: CGPoint(x: 520.71, y: 370.26), controlPoint1: CGPoint(x: 584.81, y: 272.46), controlPoint2: CGPoint(x: 546.19, y: 339.9))
        bezierPath.addCurve(to: CGPoint(x: 489.6, y: 394.67), controlPoint1: CGPoint(x: 510.55, y: 382.31), controlPoint2: CGPoint(x: 494.76, y: 394.67))
        bezierPath.addCurve(to: CGPoint(x: 471.62, y: 380.58), controlPoint1: CGPoint(x: 482.25, y: 394.67), controlPoint2: CGPoint(x: 476.16, y: 389.97))
        bezierPath.addLine(to: CGPoint(x: 467.4, y: 371.98))
        bezierPath.addLine(to: CGPoint(x: 467.87, y: 290.77))
        bezierPath.addCurve(to: CGPoint(x: 460.06, y: 189.22), controlPoint1: CGPoint(x: 468.34, y: 203.3), controlPoint2: CGPoint(x: 468.03, y: 200.8))
        bezierPath.addCurve(to: CGPoint(x: 380.64, y: 173.26), controlPoint1: CGPoint(x: 452.08, y: 177.96), controlPoint2: CGPoint(x: 432.7, y: 174.04))
        bezierPath.addCurve(to: CGPoint(x: 334.52, y: 173.42), controlPoint1: CGPoint(x: 359.54, y: 173.11), controlPoint2: CGPoint(x: 338.9, y: 173.11))
        bezierPath.close()
        main.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawGoogle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)
        
        
        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)
        
        //// Group 2
        context.saveGState()
        context.translateBy(x: 473.82, y: 476.66)
        
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -85.14, y: -343.56))
        bezierPath.addCurve(to: CGPoint(x: -167.9, y: -325.09), controlPoint1: CGPoint(x: -112.69, y: -341.92), controlPoint2: CGPoint(x: -141.52, y: -335.49))
        bezierPath.addCurve(to: CGPoint(x: -207.1, y: -305.64), controlPoint1: CGPoint(x: -177.5, y: -321.35), controlPoint2: CGPoint(x: -197.85, y: -311.25))
        bezierPath.addCurve(to: CGPoint(x: -288.29, y: -229.67), controlPoint1: CGPoint(x: -238.1, y: -286.94), controlPoint2: CGPoint(x: -266.99, y: -259.88))
        bezierPath.addCurve(to: CGPoint(x: -317.01, y: -176.5), controlPoint1: CGPoint(x: -298.58, y: -215.06), controlPoint2: CGPoint(x: -310.4, y: -193.15))
        bezierPath.addCurve(to: CGPoint(x: -317.24, y: 23.93), controlPoint1: CGPoint(x: -342.57, y: -112.05), controlPoint2: CGPoint(x: -342.69, y: -40.64))
        bezierPath.addCurve(to: CGPoint(x: -297.76, y: 63.08), controlPoint1: CGPoint(x: -313.5, y: 33.51), controlPoint2: CGPoint(x: -303.38, y: 53.85))
        bezierPath.addCurve(to: CGPoint(x: -222.54, y: 143.6), controlPoint1: CGPoint(x: -278.87, y: 94.22), controlPoint2: CGPoint(x: -252.9, y: 122.04))
        bezierPath.addCurve(to: CGPoint(x: -167.9, y: 173.11), controlPoint1: CGPoint(x: -208.32, y: 153.71), controlPoint2: CGPoint(x: -184.28, y: 166.68))
        bezierPath.addCurve(to: CGPoint(x: 77.3, y: 148.98), controlPoint1: CGPoint(x: -86.07, y: 205.25), controlPoint2: CGPoint(x: 6.99, y: 196.07))
        bezierPath.addCurve(to: CGPoint(x: 143.52, y: 82.36), controlPoint1: CGPoint(x: 103.63, y: 131.27), controlPoint2: CGPoint(x: 125.91, y: 108.89))
        bezierPath.addCurve(to: CGPoint(x: 159.72, y: 54.31), controlPoint1: CGPoint(x: 150.71, y: 71.49), controlPoint2: CGPoint(x: 153.76, y: 66.29))
        bezierPath.addCurve(to: CGPoint(x: 188.15, y: -67.23), controlPoint1: CGPoint(x: 177.39, y: 18.84), controlPoint2: CGPoint(x: 186.92, y: -21.94))
        bezierPath.addCurve(to: CGPoint(x: 183.82, y: -117.07), controlPoint1: CGPoint(x: 188.62, y: -85.28), controlPoint2: CGPoint(x: 187.51, y: -98.2))
        bezierPath.addLine(to: CGPoint(x: 182.3, y: -125.08))
        bezierPath.addLine(to: CGPoint(x: 57.18, y: -125.08))
        bezierPath.addLine(to: CGPoint(x: -67.88, y: -125.08))
        bezierPath.addLine(to: CGPoint(x: -67.88, y: -73.07))
        bezierPath.addLine(to: CGPoint(x: -67.88, y: -21.07))
        bezierPath.addLine(to: CGPoint(x: 3.78, y: -21.07))
        bezierPath.addLine(to: CGPoint(x: 75.49, y: -21.07))
        bezierPath.addLine(to: CGPoint(x: 75.08, y: -18.9))
        bezierPath.addCurve(to: CGPoint(x: 68.94, y: 0.96), controlPoint1: CGPoint(x: 74.5, y: -15.46), controlPoint2: CGPoint(x: 70.99, y: -4.12))
        bezierPath.addCurve(to: CGPoint(x: -26.64, y: 77.69), controlPoint1: CGPoint(x: 53.38, y: 40.23), controlPoint2: CGPoint(x: 18.99, y: 67.81))
        bezierPath.addCurve(to: CGPoint(x: -82.8, y: 81.25), controlPoint1: CGPoint(x: -43.14, y: 81.25), controlPoint2: CGPoint(x: -67.59, y: 82.77))
        bezierPath.addCurve(to: CGPoint(x: -209.49, y: -5.87), controlPoint1: CGPoint(x: -138.13, y: 75.64), controlPoint2: CGPoint(x: -184.93, y: 43.45))
        bezierPath.addCurve(to: CGPoint(x: -225.81, y: -75.99), controlPoint1: CGPoint(x: -220.49, y: -27.96), controlPoint2: CGPoint(x: -225.81, y: -50.87))
        bezierPath.addCurve(to: CGPoint(x: -179.6, y: -187.6), controlPoint1: CGPoint(x: -225.81, y: -118.53), controlPoint2: CGPoint(x: -209.61, y: -157.62))
        bezierPath.addCurve(to: CGPoint(x: -85.43, y: -232.94), controlPoint1: CGPoint(x: -153.92, y: -213.25), controlPoint2: CGPoint(x: -121.81, y: -228.74))
        bezierPath.addCurve(to: CGPoint(x: -45.48, y: -232.36), controlPoint1: CGPoint(x: -75.13, y: -234.11), controlPoint2: CGPoint(x: -54.54, y: -233.82))
        bezierPath.addCurve(to: CGPoint(x: 20.86, y: -205.83), controlPoint1: CGPoint(x: -20.44, y: -228.27), controlPoint2: CGPoint(x: 1.32, y: -219.62))
        bezierPath.addCurve(to: CGPoint(x: 29.4, y: -199.7), controlPoint1: CGPoint(x: 24.66, y: -203.2), controlPoint2: CGPoint(x: 28.52, y: -200.4))
        bezierPath.addLine(to: CGPoint(x: 31.04, y: -198.47))
        bezierPath.addLine(to: CGPoint(x: 70.23, y: -237.56))
        bezierPath.addLine(to: CGPoint(x: 109.42, y: -276.71))
        bezierPath.addLine(to: CGPoint(x: 106.61, y: -279.22))
        bezierPath.addCurve(to: CGPoint(x: 96.9, y: -287.11), controlPoint1: CGPoint(x: 105.09, y: -280.63), controlPoint2: CGPoint(x: 100.7, y: -284.19))
        bezierPath.addCurve(to: CGPoint(x: -85.14, y: -343.56), controlPoint1: CGPoint(x: 44.14, y: -328.02), controlPoint2: CGPoint(x: -18.69, y: -347.53))
        bezierPath.close()
        main.setFill()
        bezierPath.fill()
        
        
        
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawFacebook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)
        
        
        //// Color Declarations
        let main = UIColor(red: 0.125, green: 0.125, blue: 0.125, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 420.31, y: 139.23))
        bezierPath.addCurve(to: CGPoint(x: 357.78, y: 165.71), controlPoint1: CGPoint(x: 394.35, y: 142.29), controlPoint2: CGPoint(x: 372.1, y: 151.71))
        bezierPath.addCurve(to: CGPoint(x: 343.2, y: 186.33), controlPoint1: CGPoint(x: 350.74, y: 172.59), controlPoint2: CGPoint(x: 347.8, y: 176.91))
        bezierPath.addCurve(to: CGPoint(x: 332.46, y: 262.84), controlPoint1: CGPoint(x: 333.48, y: 206.32), controlPoint2: CGPoint(x: 333.09, y: 209.63))
        bezierPath.addLine(to: CGPoint(x: 331.82, y: 309.69))
        bezierPath.addLine(to: CGPoint(x: 304.45, y: 309.69))
        bezierPath.addLine(to: CGPoint(x: 277.08, y: 309.69))
        bezierPath.addLine(to: CGPoint(x: 277.08, y: 354.88))
        bezierPath.addLine(to: CGPoint(x: 277.08, y: 400.07))
        bezierPath.addLine(to: CGPoint(x: 304.58, y: 400.07))
        bezierPath.addLine(to: CGPoint(x: 332.07, y: 400.07))
        bezierPath.addLine(to: CGPoint(x: 332.07, y: 531.83))
        bezierPath.addLine(to: CGPoint(x: 332.07, y: 663.58))
        bezierPath.addLine(to: CGPoint(x: 385.78, y: 663.58))
        bezierPath.addLine(to: CGPoint(x: 439.49, y: 663.58))
        bezierPath.addLine(to: CGPoint(x: 439.49, y: 531.19))
        bezierPath.addLine(to: CGPoint(x: 439.49, y: 398.8))
        bezierPath.addLine(to: CGPoint(x: 476.58, y: 398.8))
        bezierPath.addCurve(to: CGPoint(x: 513.66, y: 398.16), controlPoint1: CGPoint(x: 497.04, y: 398.8), controlPoint2: CGPoint(x: 513.66, y: 398.54))
        bezierPath.addCurve(to: CGPoint(x: 517.5, y: 354.63), controlPoint1: CGPoint(x: 513.66, y: 397.78), controlPoint2: CGPoint(x: 515.45, y: 378.3))
        bezierPath.addCurve(to: CGPoint(x: 521.33, y: 310.71), controlPoint1: CGPoint(x: 519.67, y: 331.08), controlPoint2: CGPoint(x: 521.33, y: 311.34))
        bezierPath.addCurve(to: CGPoint(x: 480.41, y: 309.69), controlPoint1: CGPoint(x: 521.33, y: 310.2), controlPoint2: CGPoint(x: 502.92, y: 309.69))
        bezierPath.addLine(to: CGPoint(x: 439.49, y: 309.69))
        bezierPath.addLine(to: CGPoint(x: 439.49, y: 280.28))
        bezierPath.addCurve(to: CGPoint(x: 440.9, y: 245.4), controlPoint1: CGPoint(x: 439.49, y: 263.35), controlPoint2: CGPoint(x: 440.13, y: 248.71))
        bezierPath.addCurve(to: CGPoint(x: 454.32, y: 231.91), controlPoint1: CGPoint(x: 442.56, y: 238.66), controlPoint2: CGPoint(x: 447.8, y: 233.44))
        bezierPath.addCurve(to: CGPoint(x: 490.39, y: 230.76), controlPoint1: CGPoint(x: 457.14, y: 231.4), controlPoint2: CGPoint(x: 473.25, y: 230.76))
        bezierPath.addLine(to: CGPoint(x: 521.33, y: 230.76))
        bezierPath.addLine(to: CGPoint(x: 521.33, y: 184.3))
        bezierPath.addLine(to: CGPoint(x: 521.33, y: 137.83))
        bezierPath.addLine(to: CGPoint(x: 475.68, y: 137.96))
        bezierPath.addCurve(to: CGPoint(x: 420.31, y: 139.23), controlPoint1: CGPoint(x: 450.49, y: 138.09), controlPoint2: CGPoint(x: 425.55, y: 138.6))
        bezierPath.close()
        main.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawYoutube(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)
        
        
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.986, green: 0.000, blue: 0.027, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 328.27, y: 297.29))
        bezierPath.addLine(to: CGPoint(x: 328.07, y: 511.58))
        bezierPath.addLine(to: CGPoint(x: 514.8, y: 404.26))
        bezierPath.addLine(to: CGPoint(x: 328.27, y: 297.29))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 399.54, y: 151))
        bezierPath.addCurve(to: CGPoint(x: 680.82, y: 166.26), controlPoint1: CGPoint(x: 399.5, y: 151), controlPoint2: CGPoint(x: 624.56, y: 151))
        bezierPath.addCurve(to: CGPoint(x: 744.19, y: 229.08), controlPoint1: CGPoint(x: 711.62, y: 174.48), controlPoint2: CGPoint(x: 735.9, y: 198.55))
        bezierPath.addCurve(to: CGPoint(x: 759, y: 401.09), controlPoint1: CGPoint(x: 759.59, y: 284.85), controlPoint2: CGPoint(x: 759, y: 401.09))
        bezierPath.addCurve(to: CGPoint(x: 744.19, y: 572.51), controlPoint1: CGPoint(x: 759, y: 401.09), controlPoint2: CGPoint(x: 759, y: 516.74))
        bezierPath.addCurve(to: CGPoint(x: 680.82, y: 635.32), controlPoint1: CGPoint(x: 735.9, y: 603.04), controlPoint2: CGPoint(x: 711.62, y: 627.1))
        bezierPath.addCurve(to: CGPoint(x: 399.5, y: 650), controlPoint1: CGPoint(x: 624.56, y: 650), controlPoint2: CGPoint(x: 399.5, y: 650))
        bezierPath.addCurve(to: CGPoint(x: 118.18, y: 634.74), controlPoint1: CGPoint(x: 399.5, y: 650), controlPoint2: CGPoint(x: 175.03, y: 650))
        bezierPath.addCurve(to: CGPoint(x: 54.81, y: 571.92), controlPoint1: CGPoint(x: 87.38, y: 626.52), controlPoint2: CGPoint(x: 63.1, y: 602.45))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 400.5), controlPoint1: CGPoint(x: 40, y: 516.74), controlPoint2: CGPoint(x: 40, y: 400.5))
        bezierPath.addCurve(to: CGPoint(x: 54.81, y: 229.08), controlPoint1: CGPoint(x: 40, y: 400.5), controlPoint2: CGPoint(x: 40, y: 284.85))
        bezierPath.addCurve(to: CGPoint(x: 118.18, y: 165.68), controlPoint1: CGPoint(x: 63.1, y: 198.55), controlPoint2: CGPoint(x: 87.97, y: 173.9))
        bezierPath.addCurve(to: CGPoint(x: 139.86, y: 161.68), controlPoint1: CGPoint(x: 123.83, y: 164.2), controlPoint2: CGPoint(x: 131.19, y: 162.87))
        bezierPath.addCurve(to: CGPoint(x: 399.5, y: 151), controlPoint1: CGPoint(x: 217.41, y: 151), controlPoint2: CGPoint(x: 399.5, y: 151))
        bezierPath.addLine(to: CGPoint(x: 399.54, y: 151))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    @objc public dynamic class func drawWiki(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 800, height: 800), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 800, height: 800), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 800, y: resizedFrame.height / 800)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 773, y: 171.95))
        bezierPath.addCurve(to: CGPoint(x: 770.5, y: 179.31), controlPoint1: CGPoint(x: 773, y: 174.64), controlPoint2: CGPoint(x: 772.14, y: 177.07))
        bezierPath.addCurve(to: CGPoint(x: 764.98, y: 182.59), controlPoint1: CGPoint(x: 768.79, y: 181.47), controlPoint2: CGPoint(x: 767.01, y: 182.59))
        bezierPath.addCurve(to: CGPoint(x: 724.72, y: 198.42), controlPoint1: CGPoint(x: 748.6, y: 184.17), controlPoint2: CGPoint(x: 735.11, y: 189.42))
        bezierPath.addCurve(to: CGPoint(x: 692.43, y: 249.73), controlPoint1: CGPoint(x: 714.26, y: 207.36), controlPoint2: CGPoint(x: 703.54, y: 224.5))
        bezierPath.addLine(to: CGPoint(x: 522.73, y: 631.68))
        bezierPath.addCurve(to: CGPoint(x: 513.39, y: 637), controlPoint1: CGPoint(x: 521.61, y: 635.23), controlPoint2: CGPoint(x: 518.52, y: 637))
        bezierPath.addCurve(to: CGPoint(x: 504.05, y: 631.68), controlPoint1: CGPoint(x: 509.38, y: 637), controlPoint2: CGPoint(x: 506.29, y: 635.23))
        bezierPath.addLine(to: CGPoint(x: 408.88, y: 432.89))
        bezierPath.addLine(to: CGPoint(x: 299.43, y: 631.68))
        bezierPath.addCurve(to: CGPoint(x: 290.09, y: 637), controlPoint1: CGPoint(x: 297.19, y: 635.23), controlPoint2: CGPoint(x: 294.1, y: 637))
        bezierPath.addCurve(to: CGPoint(x: 280.42, y: 631.68), controlPoint1: CGPoint(x: 285.22, y: 637), controlPoint2: CGPoint(x: 282, y: 635.23))
        bezierPath.addLine(to: CGPoint(x: 113.68, y: 249.73))
        bezierPath.addCurve(to: CGPoint(x: 80.73, y: 200.07), controlPoint1: CGPoint(x: 103.29, y: 226.02), controlPoint2: CGPoint(x: 92.31, y: 209.46))
        bezierPath.addCurve(to: CGPoint(x: 32.52, y: 182.59), controlPoint1: CGPoint(x: 69.22, y: 190.67), controlPoint2: CGPoint(x: 53.1, y: 184.83))
        bezierPath.addCurve(to: CGPoint(x: 27.52, y: 179.77), controlPoint1: CGPoint(x: 30.74, y: 182.59), controlPoint2: CGPoint(x: 29.03, y: 181.67))
        bezierPath.addCurve(to: CGPoint(x: 25.15, y: 173.33), controlPoint1: CGPoint(x: 25.94, y: 177.93), controlPoint2: CGPoint(x: 25.15, y: 175.76))
        bezierPath.addCurve(to: CGPoint(x: 30.48, y: 164), controlPoint1: CGPoint(x: 25.15, y: 167.09), controlPoint2: CGPoint(x: 26.93, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 77.11, y: 165.97), controlPoint1: CGPoint(x: 45.34, y: 164), controlPoint2: CGPoint(x: 60.87, y: 164.66))
        bezierPath.addCurve(to: CGPoint(x: 119.67, y: 168.01), controlPoint1: CGPoint(x: 92.17, y: 167.35), controlPoint2: CGPoint(x: 106.38, y: 168.01))
        bezierPath.addCurve(to: CGPoint(x: 167.62, y: 165.97), controlPoint1: CGPoint(x: 133.22, y: 168.01), controlPoint2: CGPoint(x: 149.2, y: 167.35))
        bezierPath.addCurve(to: CGPoint(x: 218.85, y: 164), controlPoint1: CGPoint(x: 186.89, y: 164.66), controlPoint2: CGPoint(x: 203.99, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 224.18, y: 173.33), controlPoint1: CGPoint(x: 222.41, y: 164), controlPoint2: CGPoint(x: 224.18, y: 167.09))
        bezierPath.addCurve(to: CGPoint(x: 220.89, y: 182.59), controlPoint1: CGPoint(x: 224.18, y: 179.5), controlPoint2: CGPoint(x: 223.06, y: 182.59))
        bezierPath.addCurve(to: CGPoint(x: 185.77, y: 193.89), controlPoint1: CGPoint(x: 206.03, y: 183.71), controlPoint2: CGPoint(x: 194.32, y: 187.52))
        bezierPath.addCurve(to: CGPoint(x: 172.94, y: 219.18), controlPoint1: CGPoint(x: 177.22, y: 200.33), controlPoint2: CGPoint(x: 172.94, y: 208.74))
        bezierPath.addCurve(to: CGPoint(x: 178.27, y: 239.09), controlPoint1: CGPoint(x: 172.94, y: 224.5), controlPoint2: CGPoint(x: 174.72, y: 231.14))
        bezierPath.addLine(to: CGPoint(x: 316.07, y: 549.89))
        bezierPath.addLine(to: CGPoint(x: 394.27, y: 402.34))
        bezierPath.addLine(to: CGPoint(x: 321.4, y: 249.73))
        bezierPath.addCurve(to: CGPoint(x: 289.1, y: 197.04), controlPoint1: CGPoint(x: 308.31, y: 222.53), controlPoint2: CGPoint(x: 297.52, y: 204.93))
        bezierPath.addCurve(to: CGPoint(x: 250.82, y: 182.59), controlPoint1: CGPoint(x: 280.68, y: 189.23), controlPoint2: CGPoint(x: 267.92, y: 184.37))
        bezierPath.addCurve(to: CGPoint(x: 246.35, y: 179.77), controlPoint1: CGPoint(x: 249.24, y: 182.59), controlPoint2: CGPoint(x: 247.79, y: 181.67))
        bezierPath.addCurve(to: CGPoint(x: 244.18, y: 173.33), controlPoint1: CGPoint(x: 244.9, y: 177.93), controlPoint2: CGPoint(x: 244.18, y: 175.76))
        bezierPath.addCurve(to: CGPoint(x: 248.85, y: 164), controlPoint1: CGPoint(x: 244.18, y: 167.09), controlPoint2: CGPoint(x: 245.69, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 289.76, y: 165.97), controlPoint1: CGPoint(x: 263.71, y: 164), controlPoint2: CGPoint(x: 277.33, y: 164.66))
        bezierPath.addCurve(to: CGPoint(x: 328.04, y: 168.01), controlPoint1: CGPoint(x: 301.73, y: 167.35), controlPoint2: CGPoint(x: 314.49, y: 168.01))
        bezierPath.addCurve(to: CGPoint(x: 370.27, y: 165.97), controlPoint1: CGPoint(x: 341.33, y: 168.01), controlPoint2: CGPoint(x: 355.4, y: 167.35))
        bezierPath.addCurve(to: CGPoint(x: 415.52, y: 164), controlPoint1: CGPoint(x: 385.59, y: 164.66), controlPoint2: CGPoint(x: 400.65, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 420.85, y: 173.33), controlPoint1: CGPoint(x: 419.07, y: 164), controlPoint2: CGPoint(x: 420.85, y: 167.09))
        bezierPath.addCurve(to: CGPoint(x: 417.56, y: 182.59), controlPoint1: CGPoint(x: 420.85, y: 179.5), controlPoint2: CGPoint(x: 419.79, y: 182.59))
        bezierPath.addCurve(to: CGPoint(x: 372.96, y: 207.88), controlPoint1: CGPoint(x: 387.83, y: 184.63), controlPoint2: CGPoint(x: 372.96, y: 193.04))
        bezierPath.addCurve(to: CGPoint(x: 383.29, y: 238.76), controlPoint1: CGPoint(x: 372.96, y: 214.52), controlPoint2: CGPoint(x: 376.38, y: 224.83))
        bezierPath.addLine(to: CGPoint(x: 431.5, y: 336.51))
        bezierPath.addLine(to: CGPoint(x: 479.45, y: 247.1))
        bezierPath.addCurve(to: CGPoint(x: 489.45, y: 215.18), controlPoint1: CGPoint(x: 486.09, y: 234.49), controlPoint2: CGPoint(x: 489.45, y: 223.85))
        bezierPath.addCurve(to: CGPoint(x: 444.85, y: 182.59), controlPoint1: CGPoint(x: 489.45, y: 194.81), controlPoint2: CGPoint(x: 474.58, y: 183.97))
        bezierPath.addCurve(to: CGPoint(x: 440.84, y: 173.33), controlPoint1: CGPoint(x: 442.16, y: 182.59), controlPoint2: CGPoint(x: 440.84, y: 179.5))
        bezierPath.addCurve(to: CGPoint(x: 442.81, y: 167.02), controlPoint1: CGPoint(x: 440.84, y: 171.09), controlPoint2: CGPoint(x: 441.5, y: 168.99))
        bezierPath.addCurve(to: CGPoint(x: 446.83, y: 164), controlPoint1: CGPoint(x: 444.2, y: 164.99), controlPoint2: CGPoint(x: 445.51, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 486.09, y: 165.97), controlPoint1: CGPoint(x: 457.48, y: 164), controlPoint2: CGPoint(x: 470.57, y: 164.66))
        bezierPath.addCurve(to: CGPoint(x: 522.73, y: 168.01), controlPoint1: CGPoint(x: 500.96, y: 167.35), controlPoint2: CGPoint(x: 513.19, y: 168.01))
        bezierPath.addCurve(to: CGPoint(x: 552.99, y: 166.3), controlPoint1: CGPoint(x: 529.57, y: 168.01), controlPoint2: CGPoint(x: 539.7, y: 167.42))
        bezierPath.addCurve(to: CGPoint(x: 595.28, y: 164), controlPoint1: CGPoint(x: 569.82, y: 164.79), controlPoint2: CGPoint(x: 583.97, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 599.23, y: 171.95), controlPoint1: CGPoint(x: 597.91, y: 164), controlPoint2: CGPoint(x: 599.23, y: 166.63))
        bezierPath.addCurve(to: CGPoint(x: 591.92, y: 182.59), controlPoint1: CGPoint(x: 599.23, y: 179.04), controlPoint2: CGPoint(x: 596.79, y: 182.59))
        bezierPath.addCurve(to: CGPoint(x: 550.16, y: 196.91), controlPoint1: CGPoint(x: 574.63, y: 184.37), controlPoint2: CGPoint(x: 560.68, y: 189.16))
        bezierPath.addCurve(to: CGPoint(x: 510.76, y: 249.73), controlPoint1: CGPoint(x: 539.63, y: 204.66), controlPoint2: CGPoint(x: 526.48, y: 222.27))
        bezierPath.addLine(to: CGPoint(x: 446.83, y: 367.78))
        bezierPath.addLine(to: CGPoint(x: 533.39, y: 543.91))
        bezierPath.addLine(to: CGPoint(x: 661.18, y: 247.1))
        bezierPath.addCurve(to: CGPoint(x: 667.83, y: 217.21), controlPoint1: CGPoint(x: 665.59, y: 236.26), controlPoint2: CGPoint(x: 667.83, y: 226.28))
        bezierPath.addCurve(to: CGPoint(x: 623.23, y: 182.59), controlPoint1: CGPoint(x: 667.83, y: 195.47), controlPoint2: CGPoint(x: 652.96, y: 183.97))
        bezierPath.addCurve(to: CGPoint(x: 619.22, y: 173.33), controlPoint1: CGPoint(x: 620.54, y: 182.59), controlPoint2: CGPoint(x: 619.22, y: 179.5))
        bezierPath.addCurve(to: CGPoint(x: 625.21, y: 164), controlPoint1: CGPoint(x: 619.22, y: 167.09), controlPoint2: CGPoint(x: 621.19, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 663.82, y: 165.97), controlPoint1: CGPoint(x: 636.06, y: 164), controlPoint2: CGPoint(x: 648.95, y: 164.66))
        bezierPath.addCurve(to: CGPoint(x: 698.41, y: 168.01), controlPoint1: CGPoint(x: 677.56, y: 167.35), controlPoint2: CGPoint(x: 689.14, y: 168.01))
        bezierPath.addCurve(to: CGPoint(x: 732.35, y: 165.97), controlPoint1: CGPoint(x: 708.21, y: 168.01), controlPoint2: CGPoint(x: 719.53, y: 167.35))
        bezierPath.addCurve(to: CGPoint(x: 768.33, y: 164), controlPoint1: CGPoint(x: 745.7, y: 164.66), controlPoint2: CGPoint(x: 757.67, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 773, y: 171.95), controlPoint1: CGPoint(x: 771.42, y: 164), controlPoint2: CGPoint(x: 773, y: 166.63))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    @objc dynamic class func drawSafari(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 287, height: 287), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 287, height: 287), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 287, y: resizedFrame.height / 287)
        
        
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.987, green: 0.217, blue: 0.249, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.931, green: 0.931, blue: 0.931, alpha: 1.000)
        let gradientColor = UIColor(red: 0.474, green: 0.741, blue: 0.996, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.147, green: 0.298, blue: 0.659, alpha: 1.000)
        
        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor.blended(withFraction: 0.5, of: gradientColor2).cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 0.46, 1])!
        
        //// Group 4
        //// Group 3
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 29, y: 31, width: 229, height: 228))
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 143.5, y: 31), end: CGPoint(x: 143.5, y: 259), options: [])
        context.restoreGState()
        
        
        
        
        //// Group 2
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 240.5, y: 144))
        oval2Path.addCurve(to: CGPoint(x: 143, y: 241.5), controlPoint1: CGPoint(x: 240.5, y: 197.85), controlPoint2: CGPoint(x: 196.85, y: 241.5))
        oval2Path.addCurve(to: CGPoint(x: 45.5, y: 144), controlPoint1: CGPoint(x: 89.15, y: 241.5), controlPoint2: CGPoint(x: 45.5, y: 197.85))
        oval2Path.addCurve(to: CGPoint(x: 143, y: 46.5), controlPoint1: CGPoint(x: 45.5, y: 90.15), controlPoint2: CGPoint(x: 89.15, y: 46.5))
        oval2Path.addCurve(to: CGPoint(x: 240.5, y: 144), controlPoint1: CGPoint(x: 196.85, y: 46.5), controlPoint2: CGPoint(x: 240.5, y: 90.15))
        oval2Path.close()
        UIColor.white.setStroke()
        oval2Path.lineWidth = 20
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [2, 15])
        oval2Path.stroke()
        context.restoreGState()
        
        
        //// Oval 3 Drawing
        context.saveGState()
        context.translateBy(x: 143.25, y: 143.75)
        
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: -97.75, y: -97.25, width: 195.5, height: 194.5))
        UIColor.white.setStroke()
        oval3Path.lineWidth = 8
        oval3Path.lineJoinStyle = .round
        context.saveGState()
        context.setLineDash(phase: 8, lengths: [2, 15])
        oval3Path.stroke()
        context.restoreGState()
        
        context.restoreGState()
        
        
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 143.5, y: 43.88))
        bezierPath.addCurve(to: CGPoint(x: 108.01, y: 50.28), controlPoint1: CGPoint(x: 131.01, y: 43.88), controlPoint2: CGPoint(x: 119.05, y: 46.14))
        bezierPath.addCurve(to: CGPoint(x: 42.88, y: 144), controlPoint1: CGPoint(x: 69.95, y: 64.56), controlPoint2: CGPoint(x: 42.88, y: 101.14))
        bezierPath.addCurve(to: CGPoint(x: 143.5, y: 244.12), controlPoint1: CGPoint(x: 42.88, y: 199.3), controlPoint2: CGPoint(x: 87.93, y: 244.12))
        bezierPath.addCurve(to: CGPoint(x: 244.12, y: 144), controlPoint1: CGPoint(x: 199.07, y: 244.12), controlPoint2: CGPoint(x: 244.12, y: 199.3))
        bezierPath.addCurve(to: CGPoint(x: 143.5, y: 43.88), controlPoint1: CGPoint(x: 244.12, y: 88.7), controlPoint2: CGPoint(x: 199.07, y: 43.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 258, y: 144))
        bezierPath.addCurve(to: CGPoint(x: 143.5, y: 258), controlPoint1: CGPoint(x: 258, y: 206.96), controlPoint2: CGPoint(x: 206.74, y: 258))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 144), controlPoint1: CGPoint(x: 80.26, y: 258), controlPoint2: CGPoint(x: 29, y: 206.96))
        bezierPath.addCurve(to: CGPoint(x: 99.33, y: 38.79), controlPoint1: CGPoint(x: 29, y: 96.63), controlPoint2: CGPoint(x: 58.02, y: 56))
        bezierPath.addCurve(to: CGPoint(x: 143.5, y: 30), controlPoint1: CGPoint(x: 112.92, y: 33.13), controlPoint2: CGPoint(x: 127.85, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 258, y: 144), controlPoint1: CGPoint(x: 206.74, y: 30), controlPoint2: CGPoint(x: 258, y: 81.04))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 143.5, y: 30), end: CGPoint(x: 143.5, y: 258), options: [])
        context.restoreGState()
        
        
        //// Group
        //// path2096 Drawing
        let path2096Path = UIBezierPath()
        path2096Path.move(to: CGPoint(x: 155.35, y: 157.67))
        path2096Path.addLine(to: CGPoint(x: 130.73, y: 131.54))
        path2096Path.addLine(to: CGPoint(x: 218.07, y: 72.01))
        path2096Path.addLine(to: CGPoint(x: 155.35, y: 157.67))
        path2096Path.close()
        fillColor3.setFill()
        path2096Path.fill()
        
        
        //// path2099 Drawing
        let path2099Path = UIBezierPath()
        path2099Path.move(to: CGPoint(x: 155.35, y: 157.67))
        path2099Path.addLine(to: CGPoint(x: 130.73, y: 131.54))
        path2099Path.addLine(to: CGPoint(x: 68.01, y: 217.21))
        path2099Path.addLine(to: CGPoint(x: 155.35, y: 157.67))
        path2099Path.close()
        fillColor4.setFill()
        path2099Path.fill()
        
        context.restoreGState()
        
    }
    
    
    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

import UIKit

public class SafariKitName : NSObject {
    
    //// Drawing Methods
    
    
    
    
    
    
    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}




