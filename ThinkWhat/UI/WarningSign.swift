//
//  WarningSignStyleKit.swift
//  ProjectName
//
//  Created by pavel on 26.07.2019.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

@IBDesignable
final class WarningSign: UIView {
    override func draw(_ rect: CGRect) {
        WarningSignStyleKit.drawWarningSign(frame: rect, resizing: .aspectFit)
    }
}

public class WarningSignStyleKit : NSObject {
    
    //// Drawing Methods
    
    @objc public dynamic class func drawWarningSign(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)
        
        
        //// Color Declarations
        let color = UIColor(red: 0.753, green: 0.255, blue: 0.271, alpha: 1.000)
        
        //// Page-1
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 25.78, y: 13.69))
        combinedShapePath.addCurve(to: CGPoint(x: 33.22, y: 13.69), controlPoint1: CGPoint(x: 27.83, y: 9.74), controlPoint2: CGPoint(x: 31.17, y: 9.74))
        combinedShapePath.addLine(to: CGPoint(x: 48.89, y: 43.84))
        combinedShapePath.addCurve(to: CGPoint(x: 44.29, y: 51), controlPoint1: CGPoint(x: 50.95, y: 47.79), controlPoint2: CGPoint(x: 48.89, y: 51))
        combinedShapePath.addLine(to: CGPoint(x: 14.71, y: 51))
        combinedShapePath.addCurve(to: CGPoint(x: 10.11, y: 43.84), controlPoint1: CGPoint(x: 10.11, y: 51), controlPoint2: CGPoint(x: 8.05, y: 47.8))
        combinedShapePath.addLine(to: CGPoint(x: 25.78, y: 13.69))
        combinedShapePath.addLine(to: CGPoint(x: 25.78, y: 13.69))
        combinedShapePath.close()
        combinedShapePath.move(to: CGPoint(x: 26.03, y: 22.98))
        combinedShapePath.addCurve(to: CGPoint(x: 28.11, y: 20.98), controlPoint1: CGPoint(x: 26.03, y: 21.88), controlPoint2: CGPoint(x: 26.96, y: 20.98))
        combinedShapePath.addLine(to: CGPoint(x: 30.89, y: 20.98))
        combinedShapePath.addCurve(to: CGPoint(x: 32.97, y: 22.98), controlPoint1: CGPoint(x: 32.04, y: 20.98), controlPoint2: CGPoint(x: 32.97, y: 21.88))
        combinedShapePath.addLine(to: CGPoint(x: 32.97, y: 35.66))
        combinedShapePath.addCurve(to: CGPoint(x: 30.89, y: 37.66), controlPoint1: CGPoint(x: 32.97, y: 36.76), controlPoint2: CGPoint(x: 32.04, y: 37.66))
        combinedShapePath.addLine(to: CGPoint(x: 28.11, y: 37.66))
        combinedShapePath.addCurve(to: CGPoint(x: 26.03, y: 35.66), controlPoint1: CGPoint(x: 26.96, y: 37.66), controlPoint2: CGPoint(x: 26.03, y: 36.76))
        combinedShapePath.addLine(to: CGPoint(x: 26.03, y: 22.98))
        combinedShapePath.addLine(to: CGPoint(x: 26.03, y: 22.98))
        combinedShapePath.close()
        combinedShapePath.move(to: CGPoint(x: 29.5, y: 46.55))
        combinedShapePath.addCurve(to: CGPoint(x: 32.97, y: 43.22), controlPoint1: CGPoint(x: 31.42, y: 46.55), controlPoint2: CGPoint(x: 32.97, y: 45.06))
        combinedShapePath.addCurve(to: CGPoint(x: 29.5, y: 39.88), controlPoint1: CGPoint(x: 32.97, y: 41.38), controlPoint2: CGPoint(x: 31.42, y: 39.88))
        combinedShapePath.addCurve(to: CGPoint(x: 26.03, y: 43.22), controlPoint1: CGPoint(x: 27.58, y: 39.88), controlPoint2: CGPoint(x: 26.03, y: 41.38))
        combinedShapePath.addCurve(to: CGPoint(x: 29.5, y: 46.55), controlPoint1: CGPoint(x: 26.03, y: 45.06), controlPoint2: CGPoint(x: 27.58, y: 46.55))
        combinedShapePath.addLine(to: CGPoint(x: 29.5, y: 46.55))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        color.setFill()
        combinedShapePath.fill()
        
        context.restoreGState()
        
    }
    
    
    
    
    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
